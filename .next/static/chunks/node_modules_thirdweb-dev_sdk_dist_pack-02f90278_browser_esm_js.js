"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_thirdweb-dev_sdk_dist_pack-02f90278_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-a5888d37.browser.esm.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-a5888d37.browser.esm.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"S\": function() { return /* binding */ StandardErc1155; }\n/* harmony export */ });\n/* harmony import */ var _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transactions-72f9603c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-72f9603c.browser.esm.js\");\n/* harmony import */ var _erc_1155_7ce9bee1_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./erc-1155-7ce9bee1.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-1155-7ce9bee1.browser.esm.js\");\n\n\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new _erc_1155_7ce9bee1_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.E(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns The total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    };\n  })());\n\n  /**\n   * Transfer multiple NFTs\n   * \n   * @remarks Transfer multiple NFTs from the connected wallet to another wallet.\n   * \n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFTs to\n   * const toAddress = \"{{wallet_address}}\";\n   * // Array of token IDs of the NFTs you want to send\n   * const tokenIds = [\"0\", \"1\", \"2\"];\n   * // Array of amounts of the NFTs you want to send\n   * const amounts = [1, 2, 3];\n   * await contract.transferBatch(toAddress, tokenIds, amounts);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)((() => {\n    var _this2 = this;\n    return async function (to, tokenIds, amounts, fromAddress) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n      return _this2.erc1155.transferBatch.prepare(to, tokenIds, amounts, fromAddress, data);\n    };\n  })());\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)(async (operator, approved) => {\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  airdrop = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)((() => {\n    var _this3 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this3.erc1155.airdrop.prepare(tokenId, addresses, fromAddress, data);\n    };\n  })());\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-a5888d37.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/sdk/dist/pack-02f90278.browser.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/pack-02f90278.browser.esm.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Pack\": function() { return /* binding */ Pack; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _fetchCurrencyValue_32d08b05_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./fetchCurrencyValue-32d08b05.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-32d08b05.browser.esm.js\");\n/* harmony import */ var _hasERC20Allowance_654a940b_browser_esm_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./hasERC20Allowance-654a940b.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/hasERC20Allowance-654a940b.browser.esm.js\");\n/* harmony import */ var _normalizePriceValue_9851c0eb_browser_esm_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./normalizePriceValue-9851c0eb.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/normalizePriceValue-9851c0eb.browser.esm.js\");\n/* harmony import */ var _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-33cd3415.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js\");\n/* harmony import */ var _assertEnabled_d1700f0b_browser_esm_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./assertEnabled-d1700f0b.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/assertEnabled-d1700f0b.browser.esm.js\");\n/* harmony import */ var _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./contract-appuri-5c40af52.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-5c40af52.browser.esm.js\");\n/* harmony import */ var _marketplace_e3129e2f_browser_esm_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./marketplace-e3129e2f.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/marketplace-e3129e2f.browser.esm.js\");\n/* harmony import */ var _QueryParams_32a56510_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./QueryParams-32a56510.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/QueryParams-32a56510.browser.esm.js\");\n/* harmony import */ var _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transactions-72f9603c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-72f9603c.browser.esm.js\");\n/* harmony import */ var _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./contract-interceptor-d7b164a7.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js\");\n/* harmony import */ var _contract_owner_49e75547_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./contract-owner-49e75547.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-owner-49e75547.browser.esm.js\");\n/* harmony import */ var _contract_roles_71988d2e_browser_esm_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./contract-roles-71988d2e.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-roles-71988d2e.browser.esm.js\");\n/* harmony import */ var _erc_1155_standard_a5888d37_browser_esm_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./erc-1155-standard-a5888d37.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-a5888d37.browser.esm.js\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPackVRFDirect_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json */ \"./node_modules/@thirdweb-dev/sdk/node_modules/@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json\");\n/* harmony import */ var _erc_20_9a18a51c_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./erc-20-9a18a51c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-20-9a18a51c.browser.esm.js\");\n/* harmony import */ var _pack_29c3a58f_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./pack-29c3a58f.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/pack-29c3a58f.browser.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass PackVRF {\n  featureName = _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.dK.name;\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.cs(network, address, _thirdweb_dev_contracts_js_dist_abis_IPackVRFDirect_json__WEBPACK_IMPORTED_MODULE_6__, options, storage);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.a(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Open pack\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const amount = 1;\n   * const receipt = await contract.pack.open(tokenId, amount);\n   * ```\n   *\n   * @remarks\n   * Open a pack using Chainlink VRFs random number generation\n   * This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   *\n   * @param tokenId - the id of the pack to open\n   * @param amount - Optional: the amount of packs to open, defaults to 1\n   * @returns\n   * @twfeature PackVRF\n   */\n  open = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      return _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: receipt => {\n          let id = ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(0);\n          try {\n            const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n            id = event[0].args.requestId;\n          } catch (e) {}\n          return {\n            receipt,\n            id\n          };\n        }\n      });\n    };\n  })());\n\n  /**\n   * Claim the rewards from an opened pack\n   *\n   * @example\n   * ```javascript\n   * const rewards = await contract.pack.claimRewards();\n   * ```\n   *\n   * @remarks This will return the contents of the pack\n   * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns The random rewards from opening a pack\n   * @twfeature PackVRF\n   */\n  claimRewards = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)((() => {\n    var _this2 = this;\n    return async function () {\n      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\n      return _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n        contractWrapper: _this2.contractWrapper,\n        method: \"claimRewards\",\n        args: [],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this2.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          return await _this2.parseRewards(rewards);\n        }\n      });\n    };\n  })());\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await (0,_fetchCurrencyValue_32d08b05_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.f)(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers__WEBPACK_IMPORTED_MODULE_9__.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener for when a pack is opened\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\n   * });\n   * ```\n   *\n   * @param callback - the listener to call when a pack is opened\n   * @returns A unsubscribe function to cleanup the listener\n   * @twfeature PackVRF\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if a specific wallet can claim rewards after opening a pack\n   *\n   * @example\n   * ```javascript\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\n   * ```\n   * @param claimerAddress - Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   * @twfeature PackVRF\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = await (0,_index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(claimerAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"canClaimRewards\", [address]);\n  }\n\n  /**\n   * Open a pack and claim the rewards\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const amount = 1;\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\n   * ```\n   *\n   * @param packId - The id of the pack to open\n   * @param amount - Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit - Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   * @twfeature PackVRF\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(500000)\n    });\n    let id = ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the LINK balance of the contract\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.pack.getLinkBalance();\n   * ```\n   *\n   * @returns The balance of LINK in the contract\n   * @twfeature PackVRF\n   */\n  async getLinkBalance() {\n    const ERC20Abi = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"./node_modules/@thirdweb-dev/sdk/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\", 19))).default;\n    return this.getLinkContract(ERC20Abi).balanceOf(this.contractWrapper.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   *\n   * @example\n   * ```javascript\n   * const amount = 1;\n   * await contract.pack.transferLink(amount);\n   * ```\n   *\n   * @param amount - the amount of LINK to transfer to the contract\n   * @twfeature PackVRF\n   */\n  async transferLink(amount) {\n    const ERC20Abi = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"./node_modules/@thirdweb-dev/sdk/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\", 19))).default;\n    await this.getLinkContract(ERC20Abi).transfer(this.contractWrapper.address, amount);\n  }\n  getLinkContract(ERC20Abi) {\n    const linkAddress = _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aY[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.cs(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options, this.storage);\n    return new _erc_20_9a18a51c_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.E(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers\nclass Pack extends _erc_1155_standard_a5888d37_browser_esm_js__WEBPACK_IMPORTED_MODULE_12__.S {\n  static contractRoles = _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.dL;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return (0,_assertEnabled_d1700f0b_browser_esm_js__WEBPACK_IMPORTED_MODULE_13__.a)(this._vrf, _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.dK);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.cs(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        ...options.gasless,\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.bj.parse(abi || []);\n    this.metadata = new _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.C(this.contractWrapper, _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.c3, this.storage);\n    this.app = new _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.b(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _contract_roles_71988d2e_browser_esm_js__WEBPACK_IMPORTED_MODULE_14__.C(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new _contract_owner_49e75547_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.C(this.contractWrapper, this.metadata);\n    this.encoder = new _fetchCurrencyValue_32d08b05_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.C(this.contractWrapper);\n    this.estimator = new _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.G(this.contractWrapper);\n    this.events = new _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.a(this.contractWrapper);\n    this.interceptor = new _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_16__.C(this.contractWrapper);\n    this.owner = new _contract_owner_49e75547_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.a(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns The total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [(0,_index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.H)(\"transfer\"), ethers__WEBPACK_IMPORTED_MODULE_9__.constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns  The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.read(\"getPackContents\", [packId]);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await (0,_fetchCurrencyValue_32d08b05_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.f)(this.contractWrapper.getProvider(), reward.assetContract);\n            const quantityPerReward = ethers__WEBPACK_IMPORTED_MODULE_9__.utils.formatUnits(amount, tokenMetadata.decimals);\n            const totalRewards = ethers__WEBPACK_IMPORTED_MODULE_9__.utils.formatUnits(ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward,\n              totalRewards\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet. See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  create = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)(async metadataWithRewards => {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo.prepare(signerAddress, metadataWithRewards);\n  });\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack. See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  addPackContents = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)(async (packId, packContents) => {\n    const [signerAddress, parsedContents] = await Promise.all([this.contractWrapper.getSignerAddress(), _pack_29c3a58f_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__.c.parseAsync(packContents)]);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    return _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addPackContents\",\n      args: [packId, contents, numOfRewardUnits, signerAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackUpdated event not found\");\n        }\n        const id = event[0].args.packId;\n        return {\n          id: id,\n          receipt,\n          data: () => this.erc1155.get(id)\n        };\n      }\n    });\n  });\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  createTo = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)(async (to, metadataWithRewards) => {\n    const [uri, parsedMetadata, toAddress] = await Promise.all([(0,_QueryParams_32a56510_browser_esm_js__WEBPACK_IMPORTED_MODULE_18__.b)(metadataWithRewards.packMetadata, this.storage), _pack_29c3a58f_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__.d.parseAsync(metadataWithRewards), (0,_index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(to)]);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    return _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createPack\",\n      args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, toAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackCreated event not found\");\n        }\n        const packId = event[0].args.packId;\n        return {\n          id: packId,\n          receipt,\n          data: () => this.erc1155.get(packId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  open = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.f)((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      if (_this._vrf) {\n        throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n      }\n      return _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          const erc20Rewards = [];\n          const erc721Rewards = [];\n          const erc1155Rewards = [];\n          for (const reward of rewards) {\n            switch (reward.tokenType) {\n              case 0:\n                {\n                  const tokenMetadata = await (0,_fetchCurrencyValue_32d08b05_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.f)(_this.contractWrapper.getProvider(), reward.assetContract);\n                  erc20Rewards.push({\n                    contractAddress: reward.assetContract,\n                    quantityPerReward: ethers__WEBPACK_IMPORTED_MODULE_9__.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n                  });\n                  break;\n                }\n              case 1:\n                {\n                  erc721Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString()\n                  });\n                  break;\n                }\n              case 2:\n                {\n                  erc1155Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString(),\n                    quantityPerReward: reward.totalAmount.toString()\n                  });\n                  break;\n                }\n            }\n          }\n          return {\n            erc20Rewards,\n            erc721Rewards,\n            erc1155Rewards\n          };\n        }\n      });\n    };\n  })());\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await (0,_normalizePriceValue_9851c0eb_browser_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await (0,_hasERC20Allowance_654a940b_browser_esm_js__WEBPACK_IMPORTED_MODULE_20__.h)(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await (0,_marketplace_e3129e2f_browser_esm_js__WEBPACK_IMPORTED_MODULE_21__.i)(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await (0,_marketplace_e3129e2f_browser_esm_js__WEBPACK_IMPORTED_MODULE_21__.i)(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(erc1155.quantityPerReward).mul(ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n  detectVrf() {\n    if ((0,_contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.d)(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC9wYWNrLTAyZjkwMjc4LmJyb3dzZXIuZXNtLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFEO0FBQzJEO0FBQzNCO0FBQ0k7QUFDK0k7QUFDM0o7QUFDa0c7QUFDdkY7QUFDUjtBQUN5QjtBQUNmO0FBQ1U7QUFDdEI7QUFDSztBQUNBO0FBQ3JCO0FBQzhDO0FBQy9GO0FBQ2lCO0FBQ0E7QUFDTjtBQUNUO0FBQ0Q7QUFDb0Q7QUFDVDtBQUNRO0FBQ0c7QUFDRztBQUNiO0FBQ007QUFDRTtBQUNKO0FBQ1M7QUFDTDtBQUNDO0FBQ0M7QUFDRjtBQUNBO0FBQ1A7QUFDVTtBQUNXO0FBQ2Y7QUFDSjtBQUNNO0FBQ0s7QUFDRztBQUNKO0FBQ0w7QUFDRTtBQUNKO0FBQ0E7QUFDRztBQUNDO0FBQ0M7QUFDUjtBQUNNO0FBQ0s7QUFDRztBQUNmO0FBQ1E7QUFDRjtBQUNJO0FBQ0Y7QUFDSztBQUNOO0FBQ1I7QUFDVTtBQUNGO0FBQ0M7QUFDVDtBQUNLO0FBQ1U7QUFDVjtBQUNBO0FBQ0o7QUFDRDtBQUNNO0FBQ0M7QUFDQztBQUNJO0FBQ0E7QUFDRztBQUNkO0FBQ2xDO0FBQ0g7QUFDUTtBQUNzQjtBQUNSO0FBQ1g7QUFDcEI7QUFDOEI7QUFDbkI7QUFDZ0M7O0FBRXpEO0FBQ0EsZ0JBQWdCLG1FQUFxQjtBQUNyQztBQUNBLGtHQUFrRyw4REFBZSxtQkFBbUIscUZBQVc7QUFDL0k7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHVFQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3RUFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFD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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsZ0ZBQW1CO0FBQzFEO0FBQ0E7QUFDQSxpQ0FBaUMsOEVBQWlCO0FBQ2xEO0FBQ0EsOERBQThELHNCQUFzQiwrSkFBK0osc0JBQXNCLG1CQUFtQixrQkFBa0IsS0FBSyxjQUFjLEVBQUU7QUFDblU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLCtCQUErQix3RUFBMEI7QUFDekQ7QUFDQSx5Q0FBeUMsZUFBZSwyQkFBMkIsdUJBQXVCLG9KQUFvSix1QkFBdUIsMEJBQTBCLGtCQUFrQixLQUFLLGVBQWUsRUFBRTtBQUN2VjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsK0JBQStCLHdFQUEwQjtBQUN6RDtBQUNBLDBDQUEwQyxnQkFBZ0IsMkJBQTJCLHdCQUF3Qiw4SUFBOEksd0JBQXdCLHdCQUF3QixrQkFBa0IsU0FBUztBQUN0VTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGtEQUFjLGdDQUFnQyxrREFBYztBQUNqRjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHdGQUErQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMkVBQXFCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3Nkay9kaXN0L3BhY2stMDJmOTAyNzguYnJvd3Nlci5lc20uanM/MGU2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaWdOdW1iZXIsIHV0aWxzLCBjb25zdGFudHMgfSBmcm9tICdldGhlcnMnO1xuaW1wb3J0IHsgZiBhcyBmZXRjaEN1cnJlbmN5TWV0YWRhdGEsIEMgYXMgQ29udHJhY3RFbmNvZGVyIH0gZnJvbSAnLi9mZXRjaEN1cnJlbmN5VmFsdWUtMzJkMDhiMDUuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgaCBhcyBoYXNFUkMyMEFsbG93YW5jZSB9IGZyb20gJy4vaGFzRVJDMjBBbGxvd2FuY2UtNjU0YTk0MGIuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgbiBhcyBub3JtYWxpemVQcmljZVZhbHVlIH0gZnJvbSAnLi9ub3JtYWxpemVQcmljZVZhbHVlLTk4NTFjMGViLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGRLIGFzIEZFQVRVUkVfUEFDS19WUkYsIGNzIGFzIENvbnRyYWN0V3JhcHBlciwgYUwgYXMgcmVzb2x2ZUFkZHJlc3MsIGFZIGFzIExJTktfVE9LRU5fQUREUkVTUywgZEwgYXMgUEFDS19DT05UUkFDVF9ST0xFUywgYmogYXMgQWJpU2NoZW1hLCBjMyBhcyBQYWNrQ29udHJhY3RTY2hlbWEsIEggYXMgZ2V0Um9sZUhhc2ggfSBmcm9tICcuL2luZGV4LTMzY2QzNDE1LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGEgYXMgYXNzZXJ0RW5hYmxlZCB9IGZyb20gJy4vYXNzZXJ0RW5hYmxlZC1kMTcwMGYwYi5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBhIGFzIENvbnRyYWN0RXZlbnRzLCBDIGFzIENvbnRyYWN0TWV0YWRhdGEsIGIgYXMgQ29udHJhY3RBcHBVUkksIEcgYXMgR2FzQ29zdEVzdGltYXRvciwgZCBhcyBkZXRlY3RDb250cmFjdEZlYXR1cmUgfSBmcm9tICcuL2NvbnRyYWN0LWFwcHVyaS01YzQwYWY1Mi5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBpIGFzIGlzVG9rZW5BcHByb3ZlZEZvclRyYW5zZmVyIH0gZnJvbSAnLi9tYXJrZXRwbGFjZS1lMzEyOWUyZi5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBiIGFzIHVwbG9hZE9yRXh0cmFjdFVSSSB9IGZyb20gJy4vUXVlcnlQYXJhbXMtMzJhNTY1MTAuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgZiBhcyBidWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24sIFQgYXMgVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9ucy03MmY5NjAzYy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBDIGFzIENvbnRyYWN0SW50ZXJjZXB0b3IgfSBmcm9tICcuL2NvbnRyYWN0LWludGVyY2VwdG9yLWQ3YjE2NGE3LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IEMgYXMgQ29udHJhY3RSb3lhbHR5LCBhIGFzIENvbnRyYWN0T3duZXIgfSBmcm9tICcuL2NvbnRyYWN0LW93bmVyLTQ5ZTc1NTQ3LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IEMgYXMgQ29udHJhY3RSb2xlcyB9IGZyb20gJy4vY29udHJhY3Qtcm9sZXMtNzE5ODhkMmUuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgUyBhcyBTdGFuZGFyZEVyYzExNTUgfSBmcm9tICcuL2VyYy0xMTU1LXN0YW5kYXJkLWE1ODg4ZDM3LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCBJUGFja1ZSRkFiaSBmcm9tICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVBhY2tWUkZEaXJlY3QuanNvbic7XG5pbXBvcnQgeyBFIGFzIEVyYzIwIH0gZnJvbSAnLi9lcmMtMjAtOWExOGE1MWMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgYyBhcyBQYWNrUmV3YXJkc091dHB1dFNjaGVtYSwgZCBhcyBQYWNrTWV0YWRhdGFJbnB1dFNjaGVtYSB9IGZyb20gJy4vcGFjay0yOWMzYTU4Zi5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ3pvZCc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY2hhaW5zJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jcnlwdG8nO1xuaW1wb3J0ICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgJ2JuLmpzJztcbmltcG9ydCAnYnM1OCc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQnVybmFibGVFUkMyMC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BFUkMyMF9WMi5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wU2luZ2xlUGhhc2UuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcFNpbmdsZVBoYXNlX1YxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzIwLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzIwUGVybWl0Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU1pbnRhYmxlRVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTXVsdGljYWxsLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVNpZ25hdHVyZU1pbnRFUkMyMC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMyME1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUJ1cm5hYmxlRVJDNzIxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUNsYWltYWJsZUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEZWxheWVkUmV2ZWFsLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BFUkM3MjFfVjMuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDNzIxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMUVudW1lcmFibGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDNzIxQVF1ZXJ5YWJsZVVwZ3JhZGVhYmxlLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMVN1cHBseS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lMYXp5TWludC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lNaW50YWJsZUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lTaWduYXR1cmVNaW50RVJDNzIxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVNpZ25hdHVyZU1pbnRFUkM3MjFfVjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9MYXp5TWludFdpdGhUaWVyX1YxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvU2hhcmVkTWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy96b3JhX0lFUkM3MjFEcm9wLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUxveWFsdHlDYXJkLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU5GVE1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMU1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUJ1cm5hYmxlRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lDbGFpbWFibGVFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3AxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BFUkMxMTU1X1YyLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BTaW5nbGVQaGFzZTExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcFNpbmdsZVBoYXNlMTE1NV9WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzExNTVNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMxMTU1U3VwcGx5Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzExNTVFbnVtZXJhYmxlLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU1pbnRhYmxlRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lTaWduYXR1cmVNaW50RVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMyNzcxQ29udGV4dC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBcHBVUkkuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQ29udHJhY3RNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEaXJlY3RMaXN0aW5ncy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFbmdsaXNoQXVjdGlvbnMuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JT2ZmZXJzLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVBlcm1pc3Npb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVBlcm1pc3Npb25zRW51bWVyYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQbGF0Zm9ybUZlZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQcmltYXJ5U2FsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lSb3lhbHR5Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvT3duYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBaXJkcm9wRVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWlyZHJvcEVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBaXJkcm9wRVJDMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBY2NvdW50RmFjdG9yeUNvcmUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWNjb3VudFBlcm1pc3Npb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUFjY291bnRQZXJtaXNzaW9uc19WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBY2NvdW50Lmpzb24nO1xuaW1wb3J0ICdldGhlcnMvbGliL3V0aWxzJztcbmltcG9ydCAnZXZlbnRlbWl0dGVyMyc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvc3RvcmFnZSc7XG5pbXBvcnQgJy4vc2V0RXJjMjBBbGxvd2FuY2UtN2Y3NmY2NzcuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICcuL3NpZ25hdHVyZS1kM2VhNjQzZC5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvbWVya2xldHJlZSc7XG5pbXBvcnQgJ3V1aWQnO1xuaW1wb3J0ICcuL2VyYy0xMTU1LTdjZTliZWUxLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnZmFzdC1kZWVwLWVxdWFsJztcbmltcG9ydCAnLi9kcm9wLWNsYWltLWNvbmRpdGlvbnMtZTZmMmFiYmYuYnJvd3Nlci5lc20uanMnO1xuXG5jbGFzcyBQYWNrVlJGIHtcbiAgZmVhdHVyZU5hbWUgPSBGRUFUVVJFX1BBQ0tfVlJGLm5hbWU7XG4gIGNvbnN0cnVjdG9yKG5ldHdvcmssIGFkZHJlc3MsIHN0b3JhZ2UsIG9wdGlvbnMsIGNoYWluSWQpIHtcbiAgICBsZXQgY29udHJhY3RXcmFwcGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiBuZXcgQ29udHJhY3RXcmFwcGVyKG5ldHdvcmssIGFkZHJlc3MsIElQYWNrVlJGQWJpLCBvcHRpb25zLCBzdG9yYWdlKTtcbiAgICB0aGlzLmNvbnRyYWN0V3JhcHBlciA9IGNvbnRyYWN0V3JhcHBlcjtcbiAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgQ29udHJhY3RFdmVudHModGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICB9XG4gIG9uTmV0d29ya1VwZGF0ZWQobmV0d29yaykge1xuICAgIHRoaXMuY29udHJhY3RXcmFwcGVyLnVwZGF0ZVNpZ25lck9yUHJvdmlkZXIobmV0d29yayk7XG4gIH1cbiAgZ2V0QWRkcmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cmFjdFdyYXBwZXIuYWRkcmVzcztcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVuIHBhY2tcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCB0b2tlbklkID0gMDtcbiAgICogY29uc3QgYW1vdW50ID0gMTtcbiAgICogY29uc3QgcmVjZWlwdCA9IGF3YWl0IGNvbnRyYWN0LnBhY2sub3Blbih0b2tlbklkLCBhbW91bnQpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogT3BlbiBhIHBhY2sgdXNpbmcgQ2hhaW5saW5rIFZSRnMgcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uXG4gICAqIFRoaXMgd2lsbCByZXR1cm4gYSB0cmFuc2FjdGlvbiByZXN1bHQgd2l0aCB0aGUgcmVxdWVzdElkIG9mIHRoZSBvcGVuIHJlcXVlc3QsIE5PVCB0aGUgY29udGVudHMgb2YgdGhlIHBhY2tcbiAgICogVG8gZ2V0IHRoZSBjb250ZW50cyBvZiB0aGUgcGFjaywgeW91IG11c3QgY2FsbCBjbGFpbVJld2FyZHMgb25jZSB0aGUgVlJGIHJlcXVlc3QgaGFzIGJlZW4gZnVsZmlsbGVkXG4gICAqIFlvdSBjYW4gdXNlIHRoZSBjYW5DbGFpbVJld2FyZHMgbWV0aG9kIHRvIGNoZWNrIGlmIHRoZSBWUkYgcmVxdWVzdCBoYXMgYmVlbiBmdWxmaWxsZWRcbiAgICpcbiAgICogQHBhcmFtIHRva2VuSWQgLSB0aGUgaWQgb2YgdGhlIHBhY2sgdG8gb3BlblxuICAgKiBAcGFyYW0gYW1vdW50IC0gT3B0aW9uYWw6IHRoZSBhbW91bnQgb2YgcGFja3MgdG8gb3BlbiwgZGVmYXVsdHMgdG8gMVxuICAgKiBAcmV0dXJuc1xuICAgKiBAdHdmZWF0dXJlIFBhY2tWUkZcbiAgICovXG4gIG9wZW4gPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oKCgpID0+IHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiAodG9rZW5JZCkge1xuICAgICAgbGV0IGFtb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgICAgIGxldCBnYXNMaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogNTAwMDAwO1xuICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb21Db250cmFjdFdyYXBwZXIoe1xuICAgICAgICBjb250cmFjdFdyYXBwZXI6IF90aGlzLmNvbnRyYWN0V3JhcHBlcixcbiAgICAgICAgbWV0aG9kOiBcIm9wZW5QYWNrXCIsXG4gICAgICAgIGFyZ3M6IFt0b2tlbklkLCBhbW91bnRdLFxuICAgICAgICBvdmVycmlkZXM6IHtcbiAgICAgICAgICAvLyBIaWdoZXIgZ2FzIGxpbWl0IGZvciBvcGVuaW5nIHBhY2tzXG4gICAgICAgICAgZ2FzTGltaXRcbiAgICAgICAgfSxcbiAgICAgICAgcGFyc2U6IHJlY2VpcHQgPT4ge1xuICAgICAgICAgIGxldCBpZCA9IEJpZ051bWJlci5mcm9tKDApO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IF90aGlzLmNvbnRyYWN0V3JhcHBlci5wYXJzZUxvZ3MoXCJQYWNrT3BlblJlcXVlc3RlZFwiLCByZWNlaXB0Py5sb2dzKTtcbiAgICAgICAgICAgIGlkID0gZXZlbnRbMF0uYXJncy5yZXF1ZXN0SWQ7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVjZWlwdCxcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSkoKSk7XG5cbiAgLyoqXG4gICAqIENsYWltIHRoZSByZXdhcmRzIGZyb20gYW4gb3BlbmVkIHBhY2tcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCByZXdhcmRzID0gYXdhaXQgY29udHJhY3QucGFjay5jbGFpbVJld2FyZHMoKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEByZW1hcmtzIFRoaXMgd2lsbCByZXR1cm4gdGhlIGNvbnRlbnRzIG9mIHRoZSBwYWNrXG4gICAqIEByZW1hcmtzIE1ha2Ugc3VyZSB0byBjaGVjayBpZiB0aGUgVlJGIHJlcXVlc3QgaGFzIGJlZW4gZnVsZmlsbGVkIHVzaW5nIGNhbkNsYWltUmV3YXJkcygpIGJlZm9yZSBjYWxsaW5nIHRoaXMgbWV0aG9kXG4gICAqIEByZXR1cm5zIFRoZSByYW5kb20gcmV3YXJkcyBmcm9tIG9wZW5pbmcgYSBwYWNrXG4gICAqIEB0d2ZlYXR1cmUgUGFja1ZSRlxuICAgKi9cbiAgY2xhaW1SZXdhcmRzID0gLyogQF9fUFVSRV9fICovYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uKCgoKSA9PiB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBnYXNMaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogNTAwMDAwO1xuICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb21Db250cmFjdFdyYXBwZXIoe1xuICAgICAgICBjb250cmFjdFdyYXBwZXI6IF90aGlzMi5jb250cmFjdFdyYXBwZXIsXG4gICAgICAgIG1ldGhvZDogXCJjbGFpbVJld2FyZHNcIixcbiAgICAgICAgYXJnczogW10sXG4gICAgICAgIG92ZXJyaWRlczoge1xuICAgICAgICAgIC8vIEhpZ2hlciBnYXMgbGltaXQgZm9yIG9wZW5pbmcgcGFja3NcbiAgICAgICAgICBnYXNMaW1pdFxuICAgICAgICB9LFxuICAgICAgICBwYXJzZTogYXN5bmMgcmVjZWlwdCA9PiB7XG4gICAgICAgICAgY29uc3QgZXZlbnQgPSBfdGhpczIuY29udHJhY3RXcmFwcGVyLnBhcnNlTG9ncyhcIlBhY2tPcGVuZWRcIiwgcmVjZWlwdD8ubG9ncyk7XG4gICAgICAgICAgaWYgKGV2ZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFja09wZW5lZCBldmVudCBub3QgZm91bmRcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHJld2FyZHMgPSBldmVudFswXS5hcmdzLnJld2FyZFVuaXRzRGlzdHJpYnV0ZWQ7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IF90aGlzMi5wYXJzZVJld2FyZHMocmV3YXJkcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH0pKCkpO1xuICBhc3luYyBwYXJzZVJld2FyZHMocmV3YXJkcykge1xuICAgIGNvbnN0IGVyYzIwUmV3YXJkcyA9IFtdO1xuICAgIGNvbnN0IGVyYzcyMVJld2FyZHMgPSBbXTtcbiAgICBjb25zdCBlcmMxMTU1UmV3YXJkcyA9IFtdO1xuICAgIGZvciAoY29uc3QgcmV3YXJkIG9mIHJld2FyZHMpIHtcbiAgICAgIHN3aXRjaCAocmV3YXJkLnRva2VuVHlwZSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgdG9rZW5NZXRhZGF0YSA9IGF3YWl0IGZldGNoQ3VycmVuY3lNZXRhZGF0YSh0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRQcm92aWRlcigpLCByZXdhcmQuYXNzZXRDb250cmFjdCk7XG4gICAgICAgICAgICBlcmMyMFJld2FyZHMucHVzaCh7XG4gICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogcmV3YXJkLmFzc2V0Q29udHJhY3QsXG4gICAgICAgICAgICAgIHF1YW50aXR5UGVyUmV3YXJkOiB1dGlscy5mb3JtYXRVbml0cyhyZXdhcmQudG90YWxBbW91bnQsIHRva2VuTWV0YWRhdGEuZGVjaW1hbHMpLnRvU3RyaW5nKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJjNzIxUmV3YXJkcy5wdXNoKHtcbiAgICAgICAgICAgICAgY29udHJhY3RBZGRyZXNzOiByZXdhcmQuYXNzZXRDb250cmFjdCxcbiAgICAgICAgICAgICAgdG9rZW5JZDogcmV3YXJkLnRva2VuSWQudG9TdHJpbmcoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcmMxMTU1UmV3YXJkcy5wdXNoKHtcbiAgICAgICAgICAgICAgY29udHJhY3RBZGRyZXNzOiByZXdhcmQuYXNzZXRDb250cmFjdCxcbiAgICAgICAgICAgICAgdG9rZW5JZDogcmV3YXJkLnRva2VuSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgcXVhbnRpdHlQZXJSZXdhcmQ6IHJld2FyZC50b3RhbEFtb3VudC50b1N0cmluZygpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGVyYzIwUmV3YXJkcyxcbiAgICAgIGVyYzcyMVJld2FyZHMsXG4gICAgICBlcmMxMTU1UmV3YXJkc1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogU2V0dXAgYSBsaXN0ZW5lciBmb3Igd2hlbiBhIHBhY2sgaXMgb3BlbmVkXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgdW5zdWJzY3JpYmUgPSBhd2FpdCBjb250cmFjdC5wYWNrLmFkZFBhY2tPcGVuRXZlbnRMaXN0ZW5lcigocGFja0lkLCBvcGVuZXJBZGRyZXNzLCByZXdhcmRzKSA9PiB7XG4gICAqICBjb25zb2xlLmxvZyhgUGFjayAke3BhY2tJZH0gd2FzIG9wZW5lZCBieSAke29wZW5lckFkZHJlc3N9IGFuZCBjb250YWluZWQ6YCwgcmV3YXJkcyk7XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gdGhlIGxpc3RlbmVyIHRvIGNhbGwgd2hlbiBhIHBhY2sgaXMgb3BlbmVkXG4gICAqIEByZXR1cm5zIEEgdW5zdWJzY3JpYmUgZnVuY3Rpb24gdG8gY2xlYW51cCB0aGUgbGlzdGVuZXJcbiAgICogQHR3ZmVhdHVyZSBQYWNrVlJGXG4gICAqL1xuICBhc3luYyBhZGRQYWNrT3BlbkV2ZW50TGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5ldmVudHMuYWRkRXZlbnRMaXN0ZW5lcihcIlBhY2tPcGVuZWRcIiwgYXN5bmMgZXZlbnQgPT4ge1xuICAgICAgY2FsbGJhY2soZXZlbnQuZGF0YS5wYWNrSWQudG9TdHJpbmcoKSwgZXZlbnQuZGF0YS5vcGVuZXIsIGF3YWl0IHRoaXMucGFyc2VSZXdhcmRzKGV2ZW50LmRhdGEucmV3YXJkVW5pdHNEaXN0cmlidXRlZCkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgc3BlY2lmaWMgd2FsbGV0IGNhbiBjbGFpbSByZXdhcmRzIGFmdGVyIG9wZW5pbmcgYSBwYWNrXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgY2FuQ2xhaW0gPSBhd2FpdCBjb250cmFjdC5wYWNrLmNhbkNsYWltUmV3YXJkcyhcInt7d2FsbGV0X2FkZHJlc3N9fVwiKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSBjbGFpbWVyQWRkcmVzcyAtIE9wdGlvbmFsOiB0aGUgYWRkcmVzcyB0byBjaGVjayBpZiB0aGV5IGNhbiBjbGFpbSByZXdhcmRzLCBkZWZhdWx0cyB0byB0aGUgY29ubmVjdGVkIGFkZHJlc3NcbiAgICogQHJldHVybnMgd2hldGhlciB0aGUgY29ubmVjdGVkIGFkZHJlc3MgY2FuIGNsYWltIHJld2FyZHMgYWZ0ZXIgb3BlbmluZyBhIHBhY2tcbiAgICogQHR3ZmVhdHVyZSBQYWNrVlJGXG4gICAqL1xuICBhc3luYyBjYW5DbGFpbVJld2FyZHMoY2xhaW1lckFkZHJlc3MpIHtcbiAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgcmVzb2x2ZUFkZHJlc3MoY2xhaW1lckFkZHJlc3MgfHwgKGF3YWl0IHRoaXMuY29udHJhY3RXcmFwcGVyLmdldFNpZ25lckFkZHJlc3MoKSkpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5yZWFkKFwiY2FuQ2xhaW1SZXdhcmRzXCIsIFthZGRyZXNzXSk7XG4gIH1cblxuICAvKipcbiAgICogT3BlbiBhIHBhY2sgYW5kIGNsYWltIHRoZSByZXdhcmRzXG4gICAqIEByZW1hcmtzIFRoaXMgZnVuY3Rpb24gd2lsbCBvbmx5IHN0YXJ0IHRoZSBmbG93IG9mIG9wZW5pbmcgYSBwYWNrLCB0aGUgcmV3YXJkcyB3aWxsIGJlIGdyYW50ZWQgYXV0b21hdGljYWxseSB0byB0aGUgY29ubmVjdGVkIGFkZHJlc3MgYWZ0ZXIgVlJGIHJlcXVlc3QgaXMgZnVsZmlsbGVkXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcGFja0lkID0gMDtcbiAgICogY29uc3QgYW1vdW50ID0gMTtcbiAgICogY29uc3QgeyBpZCB9ID0gYXdhaXQgY29udHJhY3QucGFjay5vcGVuQW5kQ2xhaW0ocGFja0lkLCBhbW91bnQpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHBhY2tJZCAtIFRoZSBpZCBvZiB0aGUgcGFjayB0byBvcGVuXG4gICAqIEBwYXJhbSBhbW91bnQgLSBPcHRpb25hbDogdGhlIGFtb3VudCBvZiBwYWNrcyB0byBvcGVuLCBkZWZhdWx0cyB0byAxXG4gICAqIEBwYXJhbSBnYXNMaW1pdCAtIE9wdGlvbmFsOiB0aGUgZ2FzIGxpbWl0IHRvIHVzZSBmb3IgdGhlIFZSRiBjYWxsYmFjayB0cmFuc2FjdGlvbiwgZGVmYXVsdHMgdG8gNTAwMDAwXG4gICAqIEByZXR1cm5zXG4gICAqIEB0d2ZlYXR1cmUgUGFja1ZSRlxuICAgKi9cbiAgYXN5bmMgb3BlbkFuZENsYWltKHBhY2tJZCkge1xuICAgIGxldCBhbW91bnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gICAgbGV0IGdhc0xpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiA1MDAwMDA7XG4gICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHRoaXMuY29udHJhY3RXcmFwcGVyLnNlbmRUcmFuc2FjdGlvbihcIm9wZW5QYWNrQW5kQ2xhaW1SZXdhcmRzXCIsIFtwYWNrSWQsIGFtb3VudCwgZ2FzTGltaXRdLCB7XG4gICAgICAvLyBIaWdoZXIgZ2FzIGxpbWl0IGZvciBvcGVuaW5nIHBhY2tzXG4gICAgICBnYXNMaW1pdDogQmlnTnVtYmVyLmZyb20oNTAwMDAwKVxuICAgIH0pO1xuICAgIGxldCBpZCA9IEJpZ051bWJlci5mcm9tKDApO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBldmVudCA9IHRoaXMuY29udHJhY3RXcmFwcGVyLnBhcnNlTG9ncyhcIlBhY2tPcGVuUmVxdWVzdGVkXCIsIHJlY2VpcHQ/LmxvZ3MpO1xuICAgICAgaWQgPSBldmVudFswXS5hcmdzLnJlcXVlc3RJZDtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiB7XG4gICAgICByZWNlaXB0LFxuICAgICAgaWRcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgTElOSyBiYWxhbmNlIG9mIHRoZSBjb250cmFjdFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBjb250cmFjdC5wYWNrLmdldExpbmtCYWxhbmNlKCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgYmFsYW5jZSBvZiBMSU5LIGluIHRoZSBjb250cmFjdFxuICAgKiBAdHdmZWF0dXJlIFBhY2tWUkZcbiAgICovXG4gIGFzeW5jIGdldExpbmtCYWxhbmNlKCkge1xuICAgIGNvbnN0IEVSQzIwQWJpID0gKGF3YWl0IGltcG9ydCgnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMyMC5qc29uJykpLmRlZmF1bHQ7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGlua0NvbnRyYWN0KEVSQzIwQWJpKS5iYWxhbmNlT2YodGhpcy5jb250cmFjdFdyYXBwZXIuYWRkcmVzcyk7XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmZXIgTElOSyB0byB0aGlzIGNvbnRyYWN0XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgYW1vdW50ID0gMTtcbiAgICogYXdhaXQgY29udHJhY3QucGFjay50cmFuc2ZlckxpbmsoYW1vdW50KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIExJTksgdG8gdHJhbnNmZXIgdG8gdGhlIGNvbnRyYWN0XG4gICAqIEB0d2ZlYXR1cmUgUGFja1ZSRlxuICAgKi9cbiAgYXN5bmMgdHJhbnNmZXJMaW5rKGFtb3VudCkge1xuICAgIGNvbnN0IEVSQzIwQWJpID0gKGF3YWl0IGltcG9ydCgnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMyMC5qc29uJykpLmRlZmF1bHQ7XG4gICAgYXdhaXQgdGhpcy5nZXRMaW5rQ29udHJhY3QoRVJDMjBBYmkpLnRyYW5zZmVyKHRoaXMuY29udHJhY3RXcmFwcGVyLmFkZHJlc3MsIGFtb3VudCk7XG4gIH1cbiAgZ2V0TGlua0NvbnRyYWN0KEVSQzIwQWJpKSB7XG4gICAgY29uc3QgbGlua0FkZHJlc3MgPSBMSU5LX1RPS0VOX0FERFJFU1NbdGhpcy5jaGFpbklkXTtcbiAgICBpZiAoIWxpbmtBZGRyZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIExJTksgdG9rZW4gYWRkcmVzcyBmb3VuZCBmb3IgY2hhaW5JZCAke3RoaXMuY2hhaW5JZH1gKTtcbiAgICB9XG4gICAgY29uc3QgY29udHJhY3QgPSBuZXcgQ29udHJhY3RXcmFwcGVyKHRoaXMuY29udHJhY3RXcmFwcGVyLmdldFNpZ25lck9yUHJvdmlkZXIoKSwgbGlua0FkZHJlc3MsIEVSQzIwQWJpLCB0aGlzLmNvbnRyYWN0V3JhcHBlci5vcHRpb25zLCB0aGlzLnN0b3JhZ2UpO1xuICAgIHJldHVybiBuZXcgRXJjMjAoY29udHJhY3QsIHRoaXMuc3RvcmFnZSwgdGhpcy5jaGFpbklkKTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBsb290Ym94ZXMgb2YgTkZUcyB3aXRoIHJhcml0eSBiYXNlZCBvcGVuIG1lY2hhbmljcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IFRoaXJkd2ViU0RLIH0gZnJvbSBcIkB0aGlyZHdlYi1kZXYvc2RrXCI7XG4gKlxuICogY29uc3Qgc2RrID0gbmV3IFRoaXJkd2ViU0RLKFwie3tjaGFpbk5hbWV9fVwiKTtcbiAqIGNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgc2RrLmdldENvbnRyYWN0KFwie3tjb250cmFjdF9hZGRyZXNzfX1cIiwgXCJwYWNrXCIpO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyBUT0RPIGNyZWF0ZSBleHRlbnNpb24gd3JhcHBlcnNcbmNsYXNzIFBhY2sgZXh0ZW5kcyBTdGFuZGFyZEVyYzExNTUge1xuICBzdGF0aWMgY29udHJhY3RSb2xlcyA9IFBBQ0tfQ09OVFJBQ1RfUk9MRVM7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSByb3lhbHRpZXNcbiAgICogQHJlbWFya3MgU2V0IHlvdXIgb3duIHJveWFsdGllcyBmb3IgdGhlIGVudGlyZSBjb250cmFjdCBvciBwZXIgcGFja1xuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIC8vIHJveWFsdGllcyBvbiB0aGUgd2hvbGUgY29udHJhY3RcbiAgICogY29udHJhY3Qucm95YWx0aWVzLnNldERlZmF1bHRSb3lhbHR5SW5mbyh7XG4gICAqICAgc2VsbGVyX2ZlZV9iYXNpc19wb2ludHM6IDEwMCwgLy8gMSVcbiAgICogICBmZWVfcmVjaXBpZW50OiBcIjB4Li4uXCJcbiAgICogfSk7XG4gICAqIC8vIG92ZXJyaWRlIHJveWFsdHkgZm9yIGEgcGFydGljdWxhciBwYWNrXG4gICAqIGNvbnRyYWN0LnJveWFsdGllcy5zZXRUb2tlblJveWFsdHlJbmZvKHBhY2tJZCwge1xuICAgKiAgIHNlbGxlcl9mZWVfYmFzaXNfcG9pbnRzOiA1MDAsIC8vIDUlXG4gICAqICAgZmVlX3JlY2lwaWVudDogXCIweC4uLlwiXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuICAvKipcbiAgICogSWYgZW5hYmxlZCBpbiB0aGUgY29udHJhY3QsIHVzZSB0aGUgQ2hhaW5saW5rIFZSRiBmdW5jdGlvbmFsaXR5IHRvIG9wZW4gcGFja3NcbiAgICovXG4gIGdldCB2cmYoKSB7XG4gICAgcmV0dXJuIGFzc2VydEVuYWJsZWQodGhpcy5fdnJmLCBGRUFUVVJFX1BBQ0tfVlJGKTtcbiAgfVxuICBjb25zdHJ1Y3RvcihuZXR3b3JrLCBhZGRyZXNzLCBzdG9yYWdlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgIGxldCBhYmkgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgY2hhaW5JZCA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkO1xuICAgIGxldCBjb250cmFjdFdyYXBwZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IG5ldyBDb250cmFjdFdyYXBwZXIobmV0d29yaywgYWRkcmVzcywgYWJpLCBvcHRpb25zLmdhc2xlc3MgJiYgXCJvcGVuemVwcGVsaW5cIiBpbiBvcHRpb25zLmdhc2xlc3MgPyB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgZ2FzbGVzczoge1xuICAgICAgICAuLi5vcHRpb25zLmdhc2xlc3MsXG4gICAgICAgIG9wZW56ZXBwZWxpbjoge1xuICAgICAgICAgIC4uLm9wdGlvbnMuZ2FzbGVzcy5vcGVuemVwcGVsaW4sXG4gICAgICAgICAgdXNlRU9BRm9yd2FyZGVyOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IDogb3B0aW9ucywgc3RvcmFnZSk7XG4gICAgc3VwZXIoY29udHJhY3RXcmFwcGVyLCBzdG9yYWdlLCBjaGFpbklkKTtcbiAgICB0aGlzLmFiaSA9IEFiaVNjaGVtYS5wYXJzZShhYmkgfHwgW10pO1xuICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgQ29udHJhY3RNZXRhZGF0YSh0aGlzLmNvbnRyYWN0V3JhcHBlciwgUGFja0NvbnRyYWN0U2NoZW1hLCB0aGlzLnN0b3JhZ2UpO1xuICAgIHRoaXMuYXBwID0gbmV3IENvbnRyYWN0QXBwVVJJKHRoaXMuY29udHJhY3RXcmFwcGVyLCB0aGlzLm1ldGFkYXRhLCB0aGlzLnN0b3JhZ2UpO1xuICAgIHRoaXMucm9sZXMgPSBuZXcgQ29udHJhY3RSb2xlcyh0aGlzLmNvbnRyYWN0V3JhcHBlciwgUGFjay5jb250cmFjdFJvbGVzKTtcbiAgICB0aGlzLnJveWFsdGllcyA9IG5ldyBDb250cmFjdFJveWFsdHkodGhpcy5jb250cmFjdFdyYXBwZXIsIHRoaXMubWV0YWRhdGEpO1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBDb250cmFjdEVuY29kZXIodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuZXN0aW1hdG9yID0gbmV3IEdhc0Nvc3RFc3RpbWF0b3IodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuZXZlbnRzID0gbmV3IENvbnRyYWN0RXZlbnRzKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLmludGVyY2VwdG9yID0gbmV3IENvbnRyYWN0SW50ZXJjZXB0b3IodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMub3duZXIgPSBuZXcgQ29udHJhY3RPd25lcih0aGlzLmNvbnRyYWN0V3JhcHBlcik7XG4gICAgdGhpcy5fdnJmID0gdGhpcy5kZXRlY3RWcmYoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG9uTmV0d29ya1VwZGF0ZWQobmV0d29yaykge1xuICAgIHRoaXMuY29udHJhY3RXcmFwcGVyLnVwZGF0ZVNpZ25lck9yUHJvdmlkZXIobmV0d29yayk7XG4gICAgdGhpcy5fdnJmPy5vbk5ldHdvcmtVcGRhdGVkKG5ldHdvcmspO1xuICB9XG4gIGdldEFkZHJlc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJhY3RXcmFwcGVyLmFkZHJlc3M7XG4gIH1cblxuICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqIFJFQUQgRlVOQ1RJT05TXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBHZXQgYSBzaW5nbGUgUGFja1xuICAgKlxuICAgKiBAcmVtYXJrcyBHZXQgYWxsIHRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBldmVyeSBwYWNrIGluIHRoaXMgY29udHJhY3QuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHJldHVybnMgdGhlIGZpcnN0IDEwMCBwYWNrcywgdXNlIHF1ZXJ5UGFyYW1zIHRvIGZldGNoIG1vcmUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcGFjayA9IGF3YWl0IGNvbnRyYWN0LmdldCgwKTtcbiAgICogY29uc29sZS5sb2cocGFja3M7XG4gICAqIGBgYFxuICAgKi9cbiAgYXN5bmMgZ2V0KHRva2VuSWQpIHtcbiAgICByZXR1cm4gdGhpcy5lcmMxMTU1LmdldCh0b2tlbklkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQWxsIFBhY2tzXG4gICAqXG4gICAqIEByZW1hcmtzIEdldCBhbGwgdGhlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGV2ZXJ5IHBhY2sgaW4gdGhpcyBjb250cmFjdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgcmV0dXJucyB0aGUgZmlyc3QgMTAwIHBhY2tzLCB1c2UgcXVlcnlQYXJhbXMgdG8gZmV0Y2ggbW9yZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCBwYWNrcyA9IGF3YWl0IGNvbnRyYWN0LmdldEFsbCgpO1xuICAgKiBjb25zb2xlLmxvZyhwYWNrcztcbiAgICogYGBgXG4gICAqIEBwYXJhbSBxdWVyeVBhcmFtcyAtIG9wdGlvbmFsIGZpbHRlcmluZyB0byBvbmx5IGZldGNoIGEgc3Vic2V0IG9mIHJlc3VsdHMuXG4gICAqIEByZXR1cm5zIFRoZSBwYWNrIG1ldGFkYXRhIGZvciBhbGwgcGFja3MgcXVlcmllZC5cbiAgICovXG4gIGFzeW5jIGdldEFsbChxdWVyeVBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLmVyYzExNTUuZ2V0QWxsKHF1ZXJ5UGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgT3duZWQgUGFja3NcbiAgICpcbiAgICogQHJlbWFya3MgR2V0IGFsbCB0aGUgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIHBhY2tzIG93bmVkIGJ5IGEgc3BlY2lmaWMgd2FsbGV0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIC8vIEFkZHJlc3Mgb2YgdGhlIHdhbGxldCB0byBnZXQgdGhlIHBhY2tzIG9mXG4gICAqIGNvbnN0IGFkZHJlc3MgPSBcInt7d2FsbGV0X2FkZHJlc3N9fVwiO1xuICAgKiBjb25zdCBwYWNrc3MgPSBhd2FpdCBjb250cmFjdC5nZXRPd25lZChhZGRyZXNzKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBwYWNrIG1ldGFkYXRhIGZvciBhbGwgdGhlIG93bmVkIHBhY2tzIGluIHRoZSBjb250cmFjdC5cbiAgICovXG4gIGFzeW5jIGdldE93bmVkKHdhbGxldEFkZHJlc3MpIHtcbiAgICByZXR1cm4gdGhpcy5lcmMxMTU1LmdldE93bmVkKHdhbGxldEFkZHJlc3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbnVtYmVyIG9mIHBhY2tzIGNyZWF0ZWRcbiAgICogQHJldHVybnMgVGhlIHRvdGFsIG51bWJlciBvZiBwYWNrcyBtaW50ZWQgaW4gdGhpcyBjb250cmFjdFxuICAgKiBAcHVibGljXG4gICAqL1xuICBhc3luYyBnZXRUb3RhbENvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmVyYzExNTUudG90YWxDb3VudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIHVzZXJzIGNhbiB0cmFuc2ZlciBwYWNrcyBmcm9tIHRoaXMgY29udHJhY3RcbiAgICovXG4gIGFzeW5jIGlzVHJhbnNmZXJSZXN0cmljdGVkKCkge1xuICAgIGNvbnN0IGFueW9uZUNhblRyYW5zZmVyID0gYXdhaXQgdGhpcy5jb250cmFjdFdyYXBwZXIucmVhZChcImhhc1JvbGVcIiwgW2dldFJvbGVIYXNoKFwidHJhbnNmZXJcIiksIGNvbnN0YW50cy5BZGRyZXNzWmVyb10pO1xuICAgIHJldHVybiAhYW55b25lQ2FuVHJhbnNmZXI7XG4gIH1cblxuICAvKipcbiAgICogR2V0IFBhY2sgQ29udGVudHNcbiAgICogQHJlbWFya3MgR2V0IHRoZSByZXdhcmRzIGNvbnRhaW5lZCBpbnNpZGUgYSBwYWNrLlxuICAgKlxuICAgKiBAcGFyYW0gcGFja0lkIC0gVGhlIGlkIG9mIHRoZSBwYWNrIHRvIGdldCB0aGUgY29udGVudHMgb2YuXG4gICAqIEByZXR1cm5zICBUaGUgY29udGVudHMgb2YgdGhlIHBhY2suXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcGFja0lkID0gMDtcbiAgICogY29uc3QgY29udGVudHMgPSBhd2FpdCBjb250cmFjdC5nZXRQYWNrQ29udGVudHMocGFja0lkKTtcbiAgICogY29uc29sZS5sb2coY29udGVudHMuZXJjMjBSZXdhcmRzKTtcbiAgICogY29uc29sZS5sb2coY29udGVudHMuZXJjNzIxUmV3YXJkcyk7XG4gICAqIGNvbnNvbGUubG9nKGNvbnRlbnRzLmVyYzExNTVSZXdhcmRzKTtcbiAgICogYGBgXG4gICAqL1xuICBhc3luYyBnZXRQYWNrQ29udGVudHMocGFja0lkKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29udGVudHMsXG4gICAgICBwZXJVbml0QW1vdW50c1xuICAgIH0gPSBhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5yZWFkKFwiZ2V0UGFja0NvbnRlbnRzXCIsIFtwYWNrSWRdKTtcbiAgICBjb25zdCBlcmMyMFJld2FyZHMgPSBbXTtcbiAgICBjb25zdCBlcmM3MjFSZXdhcmRzID0gW107XG4gICAgY29uc3QgZXJjMTE1NVJld2FyZHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCByZXdhcmQgPSBjb250ZW50c1tpXTtcbiAgICAgIGNvbnN0IGFtb3VudCA9IHBlclVuaXRBbW91bnRzW2ldO1xuICAgICAgc3dpdGNoIChyZXdhcmQudG9rZW5UeXBlKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbk1ldGFkYXRhID0gYXdhaXQgZmV0Y2hDdXJyZW5jeU1ldGFkYXRhKHRoaXMuY29udHJhY3RXcmFwcGVyLmdldFByb3ZpZGVyKCksIHJld2FyZC5hc3NldENvbnRyYWN0KTtcbiAgICAgICAgICAgIGNvbnN0IHF1YW50aXR5UGVyUmV3YXJkID0gdXRpbHMuZm9ybWF0VW5pdHMoYW1vdW50LCB0b2tlbk1ldGFkYXRhLmRlY2ltYWxzKTtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsUmV3YXJkcyA9IHV0aWxzLmZvcm1hdFVuaXRzKEJpZ051bWJlci5mcm9tKHJld2FyZC50b3RhbEFtb3VudCkuZGl2KGFtb3VudCksIHRva2VuTWV0YWRhdGEuZGVjaW1hbHMpO1xuICAgICAgICAgICAgZXJjMjBSZXdhcmRzLnB1c2goe1xuICAgICAgICAgICAgICBjb250cmFjdEFkZHJlc3M6IHJld2FyZC5hc3NldENvbnRyYWN0LFxuICAgICAgICAgICAgICBxdWFudGl0eVBlclJld2FyZCxcbiAgICAgICAgICAgICAgdG90YWxSZXdhcmRzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVyYzcyMVJld2FyZHMucHVzaCh7XG4gICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogcmV3YXJkLmFzc2V0Q29udHJhY3QsXG4gICAgICAgICAgICAgIHRva2VuSWQ6IHJld2FyZC50b2tlbklkLnRvU3RyaW5nKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJjMTE1NVJld2FyZHMucHVzaCh7XG4gICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogcmV3YXJkLmFzc2V0Q29udHJhY3QsXG4gICAgICAgICAgICAgIHRva2VuSWQ6IHJld2FyZC50b2tlbklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgIHF1YW50aXR5UGVyUmV3YXJkOiBhbW91bnQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgdG90YWxSZXdhcmRzOiBCaWdOdW1iZXIuZnJvbShyZXdhcmQudG90YWxBbW91bnQpLmRpdihhbW91bnQpLnRvU3RyaW5nKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZXJjMjBSZXdhcmRzLFxuICAgICAgZXJjNzIxUmV3YXJkcyxcbiAgICAgIGVyYzExNTVSZXdhcmRzXG4gICAgfTtcbiAgfVxuXG4gIC8qKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogV1JJVEUgRlVOQ1RJT05TXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgUGFja1xuICAgKiBAcmVtYXJrcyBDcmVhdGUgYSBuZXcgcGFjayB3aXRoIHRoZSBnaXZlbiBtZXRhZGF0YSBhbmQgcmV3YXJkcyBhbmQgbWludCBpdCB0byB0aGUgY29ubmVjdGVkIHdhbGxldC4gU2VlIHtAbGluayBQYWNrLmNyZWF0ZVRvfVxuICAgKlxuICAgKiBAcGFyYW0gbWV0YWRhdGFXaXRoUmV3YXJkcyAtIHRoZSBtZXRhZGF0YSBhbmQgcmV3YXJkcyB0byBpbmNsdWRlIGluIHRoZSBwYWNrXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcGFjayA9IHtcbiAgICogICAvLyBUaGUgbWV0YWRhdGEgZm9yIHRoZSBwYWNrIE5GVCBpdHNlbGZcbiAgICogICBwYWNrTWV0YWRhdGE6IHtcbiAgICogICAgIG5hbWU6IFwiTXkgUGFja1wiLFxuICAgKiAgICAgZGVzY3JpcHRpb246IFwiVGhpcyBpcyBhIG5ldyBwYWNrXCIsXG4gICAqICAgICBpbWFnZTogXCJpcGZzOi8vLi4uXCIsXG4gICAqICAgfSxcbiAgICogICAvLyBFUkMyMCByZXdhcmRzIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBwYWNrXG4gICAqICAgZXJjMjBSZXdhcmRzOiBbXG4gICAqICAgICB7XG4gICAqICAgICAgIGNvbnRyYWN0QWRkcmVzczogXCIweC4uLlwiLFxuICAgKiAgICAgICBxdWFudGl0eVBlclJld2FyZDogNSxcbiAgICogICAgICAgcXVhbnRpdHk6IDEwMCxcbiAgICogICAgICAgdG90YWxSZXdhcmRzOiAyMCxcbiAgICogICAgIH1cbiAgICogICBdLFxuICAgKiAgIC8vIEVSQzcyMSByZXdhcmRzIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBwYWNrXG4gICAqICAgZXJjNzIxUmV3YXJkczogW1xuICAgKiAgICAge1xuICAgKiAgICAgICBjb250cmFjdEFkZHJlc3M6IFwiMHguLi5cIixcbiAgICogICAgICAgdG9rZW5JZDogMCxcbiAgICogICAgIH1cbiAgICogICBdLFxuICAgKiAgIC8vIEVSQzExNTUgcmV3YXJkcyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgcGFja1xuICAgKiAgIGVyYzExNTVSZXdhcmRzOiBbXG4gICAqICAgICB7XG4gICAqICAgICAgIGNvbnRyYWN0QWRkcmVzczogXCIweC4uLlwiLFxuICAgKiAgICAgICB0b2tlbklkOiAwLFxuICAgKiAgICAgICBxdWFudGl0eVBlclJld2FyZDogMSxcbiAgICogICAgICAgdG90YWxSZXdhcmRzOiAxMDAsXG4gICAqICAgICB9XG4gICAqICAgXSxcbiAgICogICBvcGVuU3RhcnRUaW1lOiBuZXcgRGF0ZSgpLCAvLyB0aGUgZGF0ZSB0aGF0IHBhY2tzIGNhbiBzdGFydCB0byBiZSBvcGVuZWQsIGRlZmF1bHRzIHRvIG5vd1xuICAgKiAgIHJld2FyZHNQZXJQYWNrOiAxLCAvLyB0aGUgbnVtYmVyIG9mIHJld2FyZHMgaW4gZWFjaCBwYWNrLCBkZWZhdWx0cyB0byAxXG4gICAqIH1cbiAgICpcbiAgICogY29uc3QgdHggPSBhd2FpdCBjb250cmFjdC5jcmVhdGUocGFjayk7XG4gICAqIGBgYFxuICAgKi9cbiAgY3JlYXRlID0gLyogQF9fUFVSRV9fICovYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uKGFzeW5jIG1ldGFkYXRhV2l0aFJld2FyZHMgPT4ge1xuICAgIGNvbnN0IHNpZ25lckFkZHJlc3MgPSBhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRTaWduZXJBZGRyZXNzKCk7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlVG8ucHJlcGFyZShzaWduZXJBZGRyZXNzLCBtZXRhZGF0YVdpdGhSZXdhcmRzKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFkZCBQYWNrIENvbnRlbnRzXG4gICAqIEByZW1hcmtzIEFkZCBjb250ZW50cyB0byBhbiBleGlzdGluZyBwYWNrLiBTZWUge0BsaW5rIFBhY2suYWRkUGFja0NvbnRlbnRzfVxuICAgKlxuICAgKiBAcGFyYW0gcGFja0lkIC0gdG9rZW4gSWQgb2YgdGhlIHBhY2sgdG8gYWRkIGNvbnRlbnRzIHRvXG4gICAqIEBwYXJhbSBwYWNrQ29udGVudHMgLSB0aGUgcmV3YXJkcyB0byBpbmNsdWRlIGluIHRoZSBwYWNrXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcGFja0NvbnRlbnRzID0ge1xuICAgKiAgIC8vIEVSQzIwIHJld2FyZHMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHBhY2tcbiAgICogICBlcmMyMFJld2FyZHM6IFtcbiAgICogICAgIHtcbiAgICogICAgICAgY29udHJhY3RBZGRyZXNzOiBcIjB4Li4uXCIsXG4gICAqICAgICAgIHF1YW50aXR5UGVyUmV3YXJkOiA1LFxuICAgKiAgICAgICBxdWFudGl0eTogMTAwLFxuICAgKiAgICAgICB0b3RhbFJld2FyZHM6IDIwLFxuICAgKiAgICAgfVxuICAgKiAgIF0sXG4gICAqICAgLy8gRVJDNzIxIHJld2FyZHMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHBhY2tcbiAgICogICBlcmM3MjFSZXdhcmRzOiBbXG4gICAqICAgICB7XG4gICAqICAgICAgIGNvbnRyYWN0QWRkcmVzczogXCIweC4uLlwiLFxuICAgKiAgICAgICB0b2tlbklkOiAwLFxuICAgKiAgICAgfVxuICAgKiAgIF0sXG4gICAqICAgLy8gRVJDMTE1NSByZXdhcmRzIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBwYWNrXG4gICAqICAgZXJjMTE1NVJld2FyZHM6IFtcbiAgICogICAgIHtcbiAgICogICAgICAgY29udHJhY3RBZGRyZXNzOiBcIjB4Li4uXCIsXG4gICAqICAgICAgIHRva2VuSWQ6IDAsXG4gICAqICAgICAgIHF1YW50aXR5UGVyUmV3YXJkOiAxLFxuICAgKiAgICAgICB0b3RhbFJld2FyZHM6IDEwMCxcbiAgICogICAgIH1cbiAgICogICBdLFxuICAgKiB9XG4gICAqXG4gICAqIGNvbnN0IHR4ID0gYXdhaXQgY29udHJhY3QuYWRkUGFja0NvbnRlbnRzKHBhY2tJZCwgcGFja0NvbnRlbnRzKTtcbiAgICogYGBgXG4gICAqL1xuICBhZGRQYWNrQ29udGVudHMgPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYXN5bmMgKHBhY2tJZCwgcGFja0NvbnRlbnRzKSA9PiB7XG4gICAgY29uc3QgW3NpZ25lckFkZHJlc3MsIHBhcnNlZENvbnRlbnRzXSA9IGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRTaWduZXJBZGRyZXNzKCksIFBhY2tSZXdhcmRzT3V0cHV0U2NoZW1hLnBhcnNlQXN5bmMocGFja0NvbnRlbnRzKV0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRlbnRzLFxuICAgICAgbnVtT2ZSZXdhcmRVbml0c1xuICAgIH0gPSBhd2FpdCB0aGlzLnRvUGFja0NvbnRlbnRBcmdzKHBhcnNlZENvbnRlbnRzKTtcbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbUNvbnRyYWN0V3JhcHBlcih7XG4gICAgICBjb250cmFjdFdyYXBwZXI6IHRoaXMuY29udHJhY3RXcmFwcGVyLFxuICAgICAgbWV0aG9kOiBcImFkZFBhY2tDb250ZW50c1wiLFxuICAgICAgYXJnczogW3BhY2tJZCwgY29udGVudHMsIG51bU9mUmV3YXJkVW5pdHMsIHNpZ25lckFkZHJlc3NdLFxuICAgICAgcGFyc2U6IHJlY2VpcHQgPT4ge1xuICAgICAgICBjb25zdCBldmVudCA9IHRoaXMuY29udHJhY3RXcmFwcGVyLnBhcnNlTG9ncyhcIlBhY2tVcGRhdGVkXCIsIHJlY2VpcHQ/LmxvZ3MpO1xuICAgICAgICBpZiAoZXZlbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFja1VwZGF0ZWQgZXZlbnQgbm90IGZvdW5kXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlkID0gZXZlbnRbMF0uYXJncy5wYWNrSWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHJlY2VpcHQsXG4gICAgICAgICAgZGF0YTogKCkgPT4gdGhpcy5lcmMxMTU1LmdldChpZClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBQYWNrIFRvIFdhbGxldFxuICAgKiBAcmVtYXJrcyBDcmVhdGUgYSBuZXcgcGFjayB3aXRoIHRoZSBnaXZlbiBtZXRhZGF0YSBhbmQgcmV3YXJkcyBhbmQgbWludCBpdCB0byB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuXG4gICAqXG4gICAqIEBwYXJhbSB0byAtIHRoZSBhZGRyZXNzIHRvIG1pbnQgdGhlIHBhY2sgdG9cbiAgICogQHBhcmFtIG1ldGFkYXRhV2l0aFJld2FyZHMgLSB0aGUgbWV0YWRhdGEgYW5kIHJld2FyZHMgdG8gaW5jbHVkZSBpbiB0aGUgcGFja1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHBhY2sgPSB7XG4gICAqICAgLy8gVGhlIG1ldGFkYXRhIGZvciB0aGUgcGFjayBORlQgaXRzZWxmXG4gICAqICAgcGFja01ldGFkYXRhOiB7XG4gICAqICAgICBuYW1lOiBcIk15IFBhY2tcIixcbiAgICogICAgIGRlc2NyaXB0aW9uOiBcIlRoaXMgaXMgYSBuZXcgcGFja1wiLFxuICAgKiAgICAgaW1hZ2U6IFwiaXBmczovLy4uLlwiLFxuICAgKiAgIH0sXG4gICAqICAgLy8gRVJDMjAgcmV3YXJkcyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgcGFja1xuICAgKiAgIGVyYzIwUmV3YXJkczogW1xuICAgKiAgICAge1xuICAgKiAgICAgICBjb250cmFjdEFkZHJlc3M6IFwiMHguLi5cIixcbiAgICogICAgICAgcXVhbnRpdHlQZXJSZXdhcmQ6IDUsXG4gICAqICAgICAgIHF1YW50aXR5OiAxMDAsXG4gICAqICAgICAgIHRvdGFsUmV3YXJkczogMjAsXG4gICAqICAgICB9XG4gICAqICAgXSxcbiAgICogICAvLyBFUkM3MjEgcmV3YXJkcyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgcGFja1xuICAgKiAgIGVyYzcyMVJld2FyZHM6IFtcbiAgICogICAgIHtcbiAgICogICAgICAgY29udHJhY3RBZGRyZXNzOiBcIjB4Li4uXCIsXG4gICAqICAgICAgIHRva2VuSWQ6IDAsXG4gICAqICAgICB9XG4gICAqICAgXSxcbiAgICogICAvLyBFUkMxMTU1IHJld2FyZHMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHBhY2tcbiAgICogICBlcmMxMTU1UmV3YXJkczogW1xuICAgKiAgICAge1xuICAgKiAgICAgICBjb250cmFjdEFkZHJlc3M6IFwiMHguLi5cIixcbiAgICogICAgICAgdG9rZW5JZDogMCxcbiAgICogICAgICAgcXVhbnRpdHlQZXJSZXdhcmQ6IDEsXG4gICAqICAgICAgIHRvdGFsUmV3YXJkczogMTAwLFxuICAgKiAgICAgfVxuICAgKiAgIF0sXG4gICAqICAgb3BlblN0YXJ0VGltZTogbmV3IERhdGUoKSwgLy8gdGhlIGRhdGUgdGhhdCBwYWNrcyBjYW4gc3RhcnQgdG8gYmUgb3BlbmVkLCBkZWZhdWx0cyB0byBub3dcbiAgICogICByZXdhcmRzUGVyUGFjazogMSwgLy8gdGhlIG51bWJlciBvZiByZXdhcmRzIGluIGVhY2ggcGFjaywgZGVmYXVsdHMgdG8gMVxuICAgKiB9XG4gICAqXG4gICAqIGNvbnN0IHR4ID0gYXdhaXQgY29udHJhY3QuY3JlYXRlVG8oXCIweC4uLlwiLCBwYWNrKTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGVUbyA9IC8qIEBfX1BVUkVfXyAqL2J1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAodG8sIG1ldGFkYXRhV2l0aFJld2FyZHMpID0+IHtcbiAgICBjb25zdCBbdXJpLCBwYXJzZWRNZXRhZGF0YSwgdG9BZGRyZXNzXSA9IGF3YWl0IFByb21pc2UuYWxsKFt1cGxvYWRPckV4dHJhY3RVUkkobWV0YWRhdGFXaXRoUmV3YXJkcy5wYWNrTWV0YWRhdGEsIHRoaXMuc3RvcmFnZSksIFBhY2tNZXRhZGF0YUlucHV0U2NoZW1hLnBhcnNlQXN5bmMobWV0YWRhdGFXaXRoUmV3YXJkcyksIHJlc29sdmVBZGRyZXNzKHRvKV0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGVyYzIwUmV3YXJkcyxcbiAgICAgIGVyYzcyMVJld2FyZHMsXG4gICAgICBlcmMxMTU1UmV3YXJkc1xuICAgIH0gPSBwYXJzZWRNZXRhZGF0YTtcbiAgICBjb25zdCByZXdhcmRzRGF0YSA9IHtcbiAgICAgIGVyYzIwUmV3YXJkcyxcbiAgICAgIGVyYzcyMVJld2FyZHMsXG4gICAgICBlcmMxMTU1UmV3YXJkc1xuICAgIH07XG4gICAgY29uc3Qge1xuICAgICAgY29udGVudHMsXG4gICAgICBudW1PZlJld2FyZFVuaXRzXG4gICAgfSA9IGF3YWl0IHRoaXMudG9QYWNrQ29udGVudEFyZ3MocmV3YXJkc0RhdGEpO1xuICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tQ29udHJhY3RXcmFwcGVyKHtcbiAgICAgIGNvbnRyYWN0V3JhcHBlcjogdGhpcy5jb250cmFjdFdyYXBwZXIsXG4gICAgICBtZXRob2Q6IFwiY3JlYXRlUGFja1wiLFxuICAgICAgYXJnczogW2NvbnRlbnRzLCBudW1PZlJld2FyZFVuaXRzLCB1cmksIHBhcnNlZE1ldGFkYXRhLm9wZW5TdGFydFRpbWUsIHBhcnNlZE1ldGFkYXRhLnJld2FyZHNQZXJQYWNrLCB0b0FkZHJlc3NdLFxuICAgICAgcGFyc2U6IHJlY2VpcHQgPT4ge1xuICAgICAgICBjb25zdCBldmVudCA9IHRoaXMuY29udHJhY3RXcmFwcGVyLnBhcnNlTG9ncyhcIlBhY2tDcmVhdGVkXCIsIHJlY2VpcHQ/LmxvZ3MpO1xuICAgICAgICBpZiAoZXZlbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFja0NyZWF0ZWQgZXZlbnQgbm90IGZvdW5kXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhY2tJZCA9IGV2ZW50WzBdLmFyZ3MucGFja0lkO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBwYWNrSWQsXG4gICAgICAgICAgcmVjZWlwdCxcbiAgICAgICAgICBkYXRhOiAoKSA9PiB0aGlzLmVyYzExNTUuZ2V0KHBhY2tJZClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIE9wZW4gUGFja1xuICAgKlxuICAgKiBAcmVtYXJrcyAtIE9wZW4gYSBwYWNrIHRvIHJldmVhbCB0aGUgY29udGFpbmVkIHJld2FyZHMuIFRoaXMgd2lsbCBidXJuIHRoZSBzcGVjaWZpZWQgcGFjayBhbmRcbiAgICogdGhlIGNvbnRhaW5lZCBhc3NldHMgd2lsbCBiZSB0cmFuc2ZlcnJlZCB0byB0aGUgb3BlbmluZyB1c2VycyB3YWxsZXQuXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbklkIC0gdGhlIHRva2VuIElEIG9mIHRoZSBwYWNrIHlvdSB3YW50IHRvIG9wZW5cbiAgICogQHBhcmFtIGFtb3VudCAtIHRoZSBhbW91bnQgb2YgcGFja3MgeW91IHdhbnQgdG8gb3BlblxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHRva2VuSWQgPSAwXG4gICAqIGNvbnN0IGFtb3VudCA9IDFcbiAgICogY29uc3QgdHggPSBhd2FpdCBjb250cmFjdC5vcGVuKHRva2VuSWQsIGFtb3VudCk7XG4gICAqIGBgYFxuICAgKi9cbiAgb3BlbiA9IC8qIEBfX1BVUkVfXyAqL2J1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbigoKCkgPT4ge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uICh0b2tlbklkKSB7XG4gICAgICBsZXQgYW1vdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICAgICAgbGV0IGdhc0xpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiA1MDAwMDA7XG4gICAgICBpZiAoX3RoaXMuX3ZyZikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGNvbnRyYWN0IGlzIHVzaW5nIENoYWlubGluayBWUkYsIHVzZSBgY29udHJhY3QudnJmLm9wZW4oKWAgb3IgYGNvbnRyYWN0LnZyZi5vcGVuQW5kQ2xhaW0oKWAgaW5zdGVhZFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tQ29udHJhY3RXcmFwcGVyKHtcbiAgICAgICAgY29udHJhY3RXcmFwcGVyOiBfdGhpcy5jb250cmFjdFdyYXBwZXIsXG4gICAgICAgIG1ldGhvZDogXCJvcGVuUGFja1wiLFxuICAgICAgICBhcmdzOiBbdG9rZW5JZCwgYW1vdW50XSxcbiAgICAgICAgb3ZlcnJpZGVzOiB7XG4gICAgICAgICAgLy8gSGlnaGVyIGdhcyBsaW1pdCBmb3Igb3BlbmluZyBwYWNrc1xuICAgICAgICAgIGdhc0xpbWl0XG4gICAgICAgIH0sXG4gICAgICAgIHBhcnNlOiBhc3luYyByZWNlaXB0ID0+IHtcbiAgICAgICAgICBjb25zdCBldmVudCA9IF90aGlzLmNvbnRyYWN0V3JhcHBlci5wYXJzZUxvZ3MoXCJQYWNrT3BlbmVkXCIsIHJlY2VpcHQ/LmxvZ3MpO1xuICAgICAgICAgIGlmIChldmVudC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhY2tPcGVuZWQgZXZlbnQgbm90IGZvdW5kXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCByZXdhcmRzID0gZXZlbnRbMF0uYXJncy5yZXdhcmRVbml0c0Rpc3RyaWJ1dGVkO1xuICAgICAgICAgIGNvbnN0IGVyYzIwUmV3YXJkcyA9IFtdO1xuICAgICAgICAgIGNvbnN0IGVyYzcyMVJld2FyZHMgPSBbXTtcbiAgICAgICAgICBjb25zdCBlcmMxMTU1UmV3YXJkcyA9IFtdO1xuICAgICAgICAgIGZvciAoY29uc3QgcmV3YXJkIG9mIHJld2FyZHMpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocmV3YXJkLnRva2VuVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5NZXRhZGF0YSA9IGF3YWl0IGZldGNoQ3VycmVuY3lNZXRhZGF0YShfdGhpcy5jb250cmFjdFdyYXBwZXIuZ2V0UHJvdmlkZXIoKSwgcmV3YXJkLmFzc2V0Q29udHJhY3QpO1xuICAgICAgICAgICAgICAgICAgZXJjMjBSZXdhcmRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBjb250cmFjdEFkZHJlc3M6IHJld2FyZC5hc3NldENvbnRyYWN0LFxuICAgICAgICAgICAgICAgICAgICBxdWFudGl0eVBlclJld2FyZDogdXRpbHMuZm9ybWF0VW5pdHMocmV3YXJkLnRvdGFsQW1vdW50LCB0b2tlbk1ldGFkYXRhLmRlY2ltYWxzKS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGVyYzcyMVJld2FyZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogcmV3YXJkLmFzc2V0Q29udHJhY3QsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuSWQ6IHJld2FyZC50b2tlbklkLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZXJjMTE1NVJld2FyZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogcmV3YXJkLmFzc2V0Q29udHJhY3QsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuSWQ6IHJld2FyZC50b2tlbklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXR5UGVyUmV3YXJkOiByZXdhcmQudG90YWxBbW91bnQudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcmMyMFJld2FyZHMsXG4gICAgICAgICAgICBlcmM3MjFSZXdhcmRzLFxuICAgICAgICAgICAgZXJjMTE1NVJld2FyZHNcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9KSgpKTtcblxuICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogUFJJVkFURSBGVU5DVElPTlNcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgYXN5bmMgdG9QYWNrQ29udGVudEFyZ3MobWV0YWRhdGFXaXRoUmV3YXJkcykge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gW107XG4gICAgY29uc3QgbnVtT2ZSZXdhcmRVbml0cyA9IFtdO1xuICAgIGNvbnN0IHtcbiAgICAgIGVyYzIwUmV3YXJkcyxcbiAgICAgIGVyYzcyMVJld2FyZHMsXG4gICAgICBlcmMxMTU1UmV3YXJkc1xuICAgIH0gPSBtZXRhZGF0YVdpdGhSZXdhcmRzO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5jb250cmFjdFdyYXBwZXIuZ2V0UHJvdmlkZXIoKTtcbiAgICBjb25zdCBvd25lciA9IGF3YWl0IHRoaXMuY29udHJhY3RXcmFwcGVyLmdldFNpZ25lckFkZHJlc3MoKTtcbiAgICBmb3IgKGNvbnN0IGVyYzIwIG9mIGVyYzIwUmV3YXJkcykge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFF1YW50aXR5ID0gYXdhaXQgbm9ybWFsaXplUHJpY2VWYWx1ZShwcm92aWRlciwgZXJjMjAucXVhbnRpdHlQZXJSZXdhcmQsIGVyYzIwLmNvbnRyYWN0QWRkcmVzcyk7XG4gICAgICAvLyBNdWx0aXBseSB0aGUgcXVhbnRpdHkgb2Ygb25lIHJld2FyZCBieSB0aGUgbnVtYmVyIG9mIHJld2FyZHNcbiAgICAgIGNvbnN0IHRvdGFsUXVhbnRpdHkgPSBub3JtYWxpemVkUXVhbnRpdHkubXVsKGVyYzIwLnRvdGFsUmV3YXJkcyk7XG4gICAgICBjb25zdCBoYXNBbGxvd2FuY2UgPSBhd2FpdCBoYXNFUkMyMEFsbG93YW5jZSh0aGlzLmNvbnRyYWN0V3JhcHBlciwgZXJjMjAuY29udHJhY3RBZGRyZXNzLCB0b3RhbFF1YW50aXR5KTtcbiAgICAgIGlmICghaGFzQWxsb3dhbmNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRVJDMjAgdG9rZW4gd2l0aCBjb250cmFjdCBhZGRyZXNzIFwiJHtlcmMyMC5jb250cmFjdEFkZHJlc3N9XCIgZG9lcyBub3QgaGF2ZSBlbm91Z2ggYWxsb3dhbmNlIHRvIHRyYW5zZmVyLlxcblxcbllvdSBjYW4gc2V0IGFsbG93YW5jZSB0byB0aGUgbXVsdGl3cmFwIGNvbnRyYWN0IHRvIHRyYW5zZmVyIHRoZXNlIHRva2VucyBieSBydW5uaW5nOlxcblxcbmF3YWl0IHNkay5nZXRUb2tlbihcIiR7ZXJjMjAuY29udHJhY3RBZGRyZXNzfVwiKS5zZXRBbGxvd2FuY2UoXCIke3RoaXMuZ2V0QWRkcmVzcygpfVwiLCAke3RvdGFsUXVhbnRpdHl9KTtcXG5cXG5gKTtcbiAgICAgIH1cbiAgICAgIG51bU9mUmV3YXJkVW5pdHMucHVzaChlcmMyMC50b3RhbFJld2FyZHMpO1xuICAgICAgY29udGVudHMucHVzaCh7XG4gICAgICAgIGFzc2V0Q29udHJhY3Q6IGVyYzIwLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgdG9rZW5UeXBlOiAwLFxuICAgICAgICB0b3RhbEFtb3VudDogdG90YWxRdWFudGl0eSxcbiAgICAgICAgdG9rZW5JZDogMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZXJjNzIxIG9mIGVyYzcyMVJld2FyZHMpIHtcbiAgICAgIGNvbnN0IGlzQXBwcm92ZWQgPSBhd2FpdCBpc1Rva2VuQXBwcm92ZWRGb3JUcmFuc2Zlcih0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRQcm92aWRlcigpLCB0aGlzLmdldEFkZHJlc3MoKSwgZXJjNzIxLmNvbnRyYWN0QWRkcmVzcywgZXJjNzIxLnRva2VuSWQsIG93bmVyKTtcbiAgICAgIGlmICghaXNBcHByb3ZlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVSQzcyMSB0b2tlbiBcIiR7ZXJjNzIxLnRva2VuSWR9XCIgd2l0aCBjb250cmFjdCBhZGRyZXNzIFwiJHtlcmM3MjEuY29udHJhY3RBZGRyZXNzfVwiIGlzIG5vdCBhcHByb3ZlZCBmb3IgdHJhbnNmZXIuXFxuXFxuWW91IGNhbiBnaXZlIGFwcHJvdmFsIHRoZSBtdWx0aXdyYXAgY29udHJhY3QgdG8gdHJhbnNmZXIgdGhpcyB0b2tlbiBieSBydW5uaW5nOlxcblxcbmF3YWl0IHNkay5nZXRORlRDb2xsZWN0aW9uKFwiJHtlcmM3MjEuY29udHJhY3RBZGRyZXNzfVwiKS5zZXRBcHByb3ZhbEZvclRva2VuKFwiJHt0aGlzLmdldEFkZHJlc3MoKX1cIiwgJHtlcmM3MjEudG9rZW5JZH0pO1xcblxcbmApO1xuICAgICAgfVxuICAgICAgbnVtT2ZSZXdhcmRVbml0cy5wdXNoKFwiMVwiKTtcbiAgICAgIGNvbnRlbnRzLnB1c2goe1xuICAgICAgICBhc3NldENvbnRyYWN0OiBlcmM3MjEuY29udHJhY3RBZGRyZXNzLFxuICAgICAgICB0b2tlblR5cGU6IDEsXG4gICAgICAgIHRvdGFsQW1vdW50OiAxLFxuICAgICAgICB0b2tlbklkOiBlcmM3MjEudG9rZW5JZFxuICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZXJjMTE1NSBvZiBlcmMxMTU1UmV3YXJkcykge1xuICAgICAgY29uc3QgaXNBcHByb3ZlZCA9IGF3YWl0IGlzVG9rZW5BcHByb3ZlZEZvclRyYW5zZmVyKHRoaXMuY29udHJhY3RXcmFwcGVyLmdldFByb3ZpZGVyKCksIHRoaXMuZ2V0QWRkcmVzcygpLCBlcmMxMTU1LmNvbnRyYWN0QWRkcmVzcywgZXJjMTE1NS50b2tlbklkLCBvd25lcik7XG4gICAgICBpZiAoIWlzQXBwcm92ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFUkMxMTU1IHRva2VuIFwiJHtlcmMxMTU1LnRva2VuSWR9XCIgd2l0aCBjb250cmFjdCBhZGRyZXNzIFwiJHtlcmMxMTU1LmNvbnRyYWN0QWRkcmVzc31cIiBpcyBub3QgYXBwcm92ZWQgZm9yIHRyYW5zZmVyLlxcblxcbllvdSBjYW4gZ2l2ZSBhcHByb3ZhbCB0aGUgbXVsdGl3cmFwIGNvbnRyYWN0IHRvIHRyYW5zZmVyIHRoaXMgdG9rZW4gYnkgcnVubmluZzpcXG5cXG5hd2FpdCBzZGsuZ2V0RWRpdGlvbihcIiR7ZXJjMTE1NS5jb250cmFjdEFkZHJlc3N9XCIpLnNldEFwcHJvdmFsRm9yQWxsKFwiJHt0aGlzLmdldEFkZHJlc3MoKX1cIiwgdHJ1ZSk7XFxuXFxuYCk7XG4gICAgICB9XG4gICAgICBudW1PZlJld2FyZFVuaXRzLnB1c2goZXJjMTE1NS50b3RhbFJld2FyZHMpO1xuICAgICAgY29udGVudHMucHVzaCh7XG4gICAgICAgIGFzc2V0Q29udHJhY3Q6IGVyYzExNTUuY29udHJhY3RBZGRyZXNzLFxuICAgICAgICB0b2tlblR5cGU6IDIsXG4gICAgICAgIHRvdGFsQW1vdW50OiBCaWdOdW1iZXIuZnJvbShlcmMxMTU1LnF1YW50aXR5UGVyUmV3YXJkKS5tdWwoQmlnTnVtYmVyLmZyb20oZXJjMTE1NS50b3RhbFJld2FyZHMpKSxcbiAgICAgICAgdG9rZW5JZDogZXJjMTE1NS50b2tlbklkXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnRzLFxuICAgICAgbnVtT2ZSZXdhcmRVbml0c1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBwcmVwYXJlKG1ldGhvZCwgYXJncywgb3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb21Db250cmFjdFdyYXBwZXIoe1xuICAgICAgY29udHJhY3RXcmFwcGVyOiB0aGlzLmNvbnRyYWN0V3JhcHBlcixcbiAgICAgIG1ldGhvZCxcbiAgICAgIGFyZ3MsXG4gICAgICBvdmVycmlkZXNcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIGNhbGwoZnVuY3Rpb25OYW1lLCBhcmdzLCBvdmVycmlkZXMpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cmFjdFdyYXBwZXIuY2FsbChmdW5jdGlvbk5hbWUsIGFyZ3MsIG92ZXJyaWRlcyk7XG4gIH1cbiAgZGV0ZWN0VnJmKCkge1xuICAgIGlmIChkZXRlY3RDb250cmFjdEZlYXR1cmUodGhpcy5jb250cmFjdFdyYXBwZXIsIFwiUGFja1ZSRlwiKSkge1xuICAgICAgcmV0dXJuIG5ldyBQYWNrVlJGKHRoaXMuY29udHJhY3RXcmFwcGVyLmdldFNpZ25lck9yUHJvdmlkZXIoKSwgdGhpcy5jb250cmFjdFdyYXBwZXIuYWRkcmVzcywgdGhpcy5zdG9yYWdlLCB0aGlzLmNvbnRyYWN0V3JhcHBlci5vcHRpb25zLCB0aGlzLmNoYWluSWQpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydCB7IFBhY2sgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/pack-02f90278.browser.esm.js\n"));

/***/ })

}]);