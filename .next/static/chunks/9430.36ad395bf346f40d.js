"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9430],{43826:function(t,e,i){i.r(e),i.d(e,{WalletConnectConnector:function(){return g}});var s=i(37139),n=i(81036),a=i(19485),r=i(241),o=i(16441),h=i(2850),c=i(84257),d=i(38168);i(68457);const p=new Set([1,137,10,42161,56]),l="wagmi.requestedChains",u="wallet_addEthereumChain",_="last-used-chain-id";class g extends d.W{constructor(t){super({...t,options:{isNewChainsStale:!0,...t.options}}),(0,s._)(this,"id",h.w.walletConnect),(0,s._)(this,"name","WalletConnect"),(0,s._)(this,"ready",!0),(0,s._)(this,"onAccountsChanged",(t=>{0===t.length?this.emit("disconnect"):t[0]&&this.emit("change",{account:a.getAddress(t[0])})})),(0,s._)(this,"onChainChanged",(async t=>{const e=Number(t),i=this.isChainUnsupported(e);await this._storage.setItem(_,String(t)),this.emit("change",{chain:{id:e,unsupported:i}})})),(0,s._)(this,"onDisconnect",(async()=>{await this._setRequestedChainsIds([]),await this._storage.removeItem(_),this.emit("disconnect")})),(0,s._)(this,"onDisplayUri",(t=>{this.emit("message",{type:"display_uri",data:t})})),(0,s._)(this,"onConnect",(()=>{this.emit("connect",{provider:this._provider})})),this._storage=t.options.storage,this._createProvider(),this.filteredChains=this.chains.length>50?this.chains.filter((t=>p.has(t.chainId))):this.chains,this.showWalletConnectModal=!1!==this.options.qrcode}async connect(){let{chainId:t,pairingTopic:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{let i=t;if(!i){const t=await this._storage.getItem(_),e=t?parseInt(t):void 0;i=e&&!this.isChainUnsupported(e)?e:this.filteredChains[0]?.chainId}if(!i)throw new Error("No chains found on connector.");const s=await this.getProvider();if(this.setupListeners(),s.session){await s.disconnect();const t=this.filteredChains.filter((t=>t.chainId!==i)).map((t=>t.chainId));this.emit("message",{type:"connecting"}),await s.connect({pairingTopic:e,chains:[i],optionalChains:t.length>0?t:[i]}),await this._setRequestedChainsIds(this.filteredChains.map((t=>{let{chainId:e}=t;return e})))}const n=await s.enable();if(!n[0])throw new Error("No accounts found on provider.");const o=a.getAddress(n[0]),h=await this.getChainId();return{account:o,chain:{id:h,unsupported:this.isChainUnsupported(h)},provider:new r.Q(s)}}catch(i){if(/user rejected/i.test(i?.message))throw new n.U(i);throw i}}async disconnect(){const t=()=>{if("undefined"!==typeof localStorage)for(const t in localStorage)t.startsWith("wc@2")&&localStorage.removeItem(t)};t();const e=await this.getProvider();(async()=>{try{await e.disconnect()}catch(i){if(!/No matching key/i.test(i.message))throw i}finally{this._removeListeners(),await this._setRequestedChainsIds([]),t()}})()}async getAccount(){const{accounts:t}=await this.getProvider();if(!t[0])throw new Error("No accounts found on provider.");return a.getAddress(t[0])}async getChainId(){const{chainId:t}=await this.getProvider();return t}async getProvider(){let{chainId:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this._provider||await this._createProvider(),t&&await this.switchChain(t),!this._provider)throw new Error("No provider found.");return this._provider}async getSigner(){let{chainId:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const[e,i]=await Promise.all([this.getProvider({chainId:t}),this.getAccount()]);return new r.Q(e,t).getSigner(i)}async isAuthorized(){try{const[t,e]=await Promise.all([this.getAccount(),this.getProvider()]),i=await this._isChainsStale();if(!t)return!1;if(i&&e.session){try{await e.disconnect()}catch{}return!1}return!0}catch{return!1}}async switchChain(t){const e=this.chains.find((e=>e.chainId===t));if(!e)throw new n.S(`Chain with ID: ${t}, not found on connector.`);try{const i=await this.getProvider(),s=this._getNamespaceChainsIds(),n=this._getNamespaceMethods();if(!s.includes(t)&&n.includes(u)){const s=e.explorers&&e.explorers[0],n=s?{blockExplorerUrls:[s.url]}:{};await i.request({method:u,params:[{chainId:o.hexValue(e.chainId),chainName:e.name,nativeCurrency:e.nativeCurrency,rpcUrls:(0,c.g)(e),...n}]});const a=await this._getRequestedChainsIds();a.push(t),await this._setRequestedChainsIds(a)}return await i.request({method:"wallet_switchEthereumChain",params:[{chainId:o.hexValue(t)}]}),e}catch(i){if(/user rejected request/i.test("string"===typeof i?i:i?.message))throw new n.U(i);throw new n.S(i)}}async _createProvider(){return this._initProviderPromise||(this._initProviderPromise=this.initProvider()),this._initProviderPromise}async initProvider(){const{default:t,OPTIONAL_EVENTS:e,OPTIONAL_METHODS:s}=await Promise.all([i.e(1133),i.e(9179),i.e(774)]).then(i.bind(i,40774)),[n,...a]=this.filteredChains.map((t=>{let{chainId:e}=t;return e}));n&&(this._provider=await t.init({showQrModal:this.showWalletConnectModal,projectId:this.options.projectId,methods:["eth_sendTransaction","personal_sign","eth_signTypedData_v4"],optionalMethods:s,optionalEvents:e,chains:[n],optionalChains:a,metadata:{name:this.options.dappMetadata.name,description:this.options.dappMetadata.description||"",url:this.options.dappMetadata.url,icons:[this.options.dappMetadata.logoUrl||""]},rpcMap:Object.fromEntries(this.filteredChains.map((t=>[t.chainId,t.rpc[0]||""]))),qrModalOptions:this.options.qrModalOptions}))}async _isChainsStale(){if(this._getNamespaceMethods().includes(u))return!1;if(!this.options.isNewChainsStale)return!1;const t=await this._getRequestedChainsIds(),e=this.filteredChains.map((t=>{let{chainId:e}=t;return e})),i=this._getNamespaceChainsIds();return!(i.length&&!i.some((t=>e.includes(t))))&&!e.every((e=>t.includes(e)))}async setupListeners(){this._provider&&(this._removeListeners(),this._provider.on("accountsChanged",this.onAccountsChanged),this._provider.on("chainChanged",this.onChainChanged),this._provider.on("disconnect",this.onDisconnect),this._provider.on("session_delete",this.onDisconnect),this._provider.on("display_uri",this.onDisplayUri),this._provider.on("connect",this.onConnect))}_removeListeners(){this._provider&&(this._provider.removeListener("accountsChanged",this.onAccountsChanged),this._provider.removeListener("chainChanged",this.onChainChanged),this._provider.removeListener("disconnect",this.onDisconnect),this._provider.removeListener("session_delete",this.onDisconnect),this._provider.removeListener("display_uri",this.onDisplayUri),this._provider.removeListener("connect",this.onConnect))}async _setRequestedChainsIds(t){await this._storage.setItem(l,JSON.stringify(t))}async _getRequestedChainsIds(){const t=await this._storage.getItem(l);return t?JSON.parse(t):[]}_getNamespaceChainsIds(){if(!this._provider)return[];const t=this._provider.session?.namespaces.eip155?.chains?.map((t=>parseInt(t.split(":")[1]||"")));return t??[]}_getNamespaceMethods(){if(!this._provider)return[];const t=this._provider.session?.namespaces.eip155?.methods;return t??[]}}}}]);