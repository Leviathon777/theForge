"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_thirdweb-dev_sdk_dist_token-1e82c71a_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-1e9d9631.browser.esm.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-1e9d9631.browser.esm.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"S\": function() { return /* binding */ StandardErc20; }\n/* harmony export */ });\n/* harmony import */ var _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transactions-72f9603c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-72f9603c.browser.esm.js\");\n/* harmony import */ var _erc_20_9a18a51c_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./erc-20-9a18a51c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-20-9a18a51c.browser.esm.js\");\n\n\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new _erc_20_9a18a51c_browser_esm_js__WEBPACK_IMPORTED_MODULE_0__.E(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)(async (to, amount) => {\n    return this.erc20.transfer.prepare(to, amount);\n  });\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  transferFrom = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)(async (from, to, amount) => {\n    return this.erc20.transferFrom.prepare(from, to, amount);\n  });\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  setAllowance = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)(async (spender, amount) => {\n    return this.erc20.setAllowance.prepare(spender, amount);\n  });\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.f)(async args => {\n    return this.erc20.transferBatch.prepare(args);\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-1e9d9631.browser.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/sdk/dist/token-1e82c71a.browser.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/token-1e82c71a.browser.esm.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Token\": function() { return /* binding */ Token; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-33cd3415.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js\");\n/* harmony import */ var _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./transactions-72f9603c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-72f9603c.browser.esm.js\");\n/* harmony import */ var _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./contract-appuri-5c40af52.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-5c40af52.browser.esm.js\");\n/* harmony import */ var _fetchCurrencyValue_32d08b05_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fetchCurrencyValue-32d08b05.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-32d08b05.browser.esm.js\");\n/* harmony import */ var _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./contract-interceptor-d7b164a7.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js\");\n/* harmony import */ var _contract_platform_fee_e756e68f_browser_esm_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./contract-platform-fee-e756e68f.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-e756e68f.browser.esm.js\");\n/* harmony import */ var _contract_roles_71988d2e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./contract-roles-71988d2e.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-roles-71988d2e.browser.esm.js\");\n/* harmony import */ var _contract_sales_918c7cb8_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./contract-sales-918c7cb8.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-sales-918c7cb8.browser.esm.js\");\n/* harmony import */ var _erc_20_9a18a51c_browser_esm_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./erc-20-9a18a51c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-20-9a18a51c.browser.esm.js\");\n/* harmony import */ var _erc_20_standard_1e9d9631_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./erc-20-standard-1e9d9631.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-1e9d9631.browser.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns  A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n      if (!(from === ethers__WEBPACK_IMPORTED_MODULE_5__.constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = ethers__WEBPACK_IMPORTED_MODULE_5__.BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === ethers__WEBPACK_IMPORTED_MODULE_5__.constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = ethers__WEBPACK_IMPORTED_MODULE_5__.BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    const entries = Object.entries(balances);\n    const results = await Promise.all(entries.map(_ref => {\n      let [, value] = _ref;\n      return (0,_fetchCurrencyValue_32d08b05_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.a)(this.contractWrapper.getProvider(), this.contractWrapper.address, value);\n    }));\n    return entries.map((_ref2, index) => {\n      let [addr] = _ref2;\n      return {\n        holder: addr,\n        balance: results[index]\n      };\n    });\n  }\n}\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc20 instead\n */\nclass Token extends _erc_20_standard_1e9d9631_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.S {\n  static contractRoles = _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dG;\n\n  /**\n   * Signature Minting\n   * @remarks Generate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the tokens\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.cs(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.bj.parse(abi || []);\n    this.metadata = new _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.C(this.contractWrapper, _index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.cb, this.storage);\n    this.app = new _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.b(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _contract_roles_71988d2e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.C(this.contractWrapper, Token.contractRoles);\n    this.sales = new _contract_sales_918c7cb8_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.C(this.contractWrapper);\n    this.events = new _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a(this.contractWrapper);\n    this.history = new TokenERC20History(this.contractWrapper, this.events);\n    this.encoder = new _fetchCurrencyValue_32d08b05_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.C(this.contractWrapper);\n    this.estimator = new _contract_appuri_5c40af52_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.G(this.contractWrapper);\n    this.platformFees = new _contract_platform_fee_e756e68f_browser_esm_js__WEBPACK_IMPORTED_MODULE_12__.C(this.contractWrapper);\n    this.interceptor = new _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_13__.C(this.contractWrapper);\n    this.signature = new _erc_20_9a18a51c_browser_esm_js__WEBPACK_IMPORTED_MODULE_14__.a(this.contractWrapper, this.roles);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns The amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.read(\"getVotes\", [account]));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.read(\"delegates\", [await (0,_index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aL)(account)]);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [(0,_index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.H)(\"transfer\"), ethers__WEBPACK_IMPORTED_MODULE_5__.constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint Tokens for the connected wallet\n   *\n   * @remarks See {@link Token.mintTo}\n   */\n  mint = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.f)(async amount => {\n    return this.erc20.mint.prepare(amount);\n  });\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   *\n   * await contract.mintTo(toAddress, amount);\n   * ```\n   */\n  mintTo = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.f)(async (to, amount) => {\n    return this.erc20.mintTo.prepare(to, amount);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, amount) {\n    return this.erc20.getMintTransaction(to, amount);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.f)(async args => {\n    return this.erc20.mintBatchTo.prepare(args);\n  });\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  delegateTo = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.f)(async delegateeAddress => {\n    return _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"delegate\",\n      args: [await (0,_index_33cd3415_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aL)(delegateeAddress)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  burn = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.f)(amount => {\n    return this.erc20.burn.prepare(amount);\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  burnFrom = /* @__PURE__ */(0,_transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.f)(async (holder, amount) => {\n    return this.erc20.burnFrom.prepare(holder, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _transactions_72f9603c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC90b2tlbi0xZTgyYzcxYS5icm93c2VyLmVzbS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QztBQUNrSjtBQUN2RjtBQUMwQztBQUN0QztBQUNuQjtBQUNDO0FBQ2I7QUFDTTtBQUNMO0FBQ0E7QUFDbEU7QUFDaUI7QUFDQTtBQUNOO0FBQ1Q7QUFDRDtBQUNvRDtBQUNUO0FBQ1E7QUFDRztBQUNHO0FBQ2I7QUFDTTtBQUNFO0FBQ0o7QUFDUztBQUNMO0FBQ0M7QUFDQztBQUNGO0FBQ0E7QUFDUDtBQUNVO0FBQ1c7QUFDZjtBQUNKO0FBQ007QUFDSztBQUNHO0FBQ0o7QUFDTDtBQUNFO0FBQ0o7QUFDQTtBQUNHO0FBQ0M7QUFDQztBQUNSO0FBQ007QUFDSztBQUNHO0FBQ2Y7QUFDUTtBQUNGO0FBQ0k7QUFDRjtBQUNLO0FBQ047QUFDUjtBQUNVO0FBQ0Y7QUFDQztBQUNUO0FBQ087QUFDRjtBQUNVO0FBQ1Y7QUFDQTtBQUNKO0FBQ0Q7QUFDTTtBQUNDO0FBQ0M7QUFDSTtBQUNBO0FBQ0c7QUFDZDtBQUNsQztBQUNIO0FBQ1E7QUFDa0I7QUFDUTtBQUNoQztBQUNvQjtBQUNVO0FBQ3JCO0FBQ21CO0FBQ3ZDOztBQUVkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseURBQXFCO0FBQzFDO0FBQ0EsMkJBQTJCLGtEQUFjO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix5REFBcUI7QUFDeEM7QUFDQSx5QkFBeUIsa0RBQWM7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOEVBQWtCO0FBQy9CLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUI7QUFDQSxrQ0FBa0MsV0FBVztBQUM3Qyw2Q0FBNkMsa0JBQWtCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUVBQWE7QUFDakMseUJBQXlCLDhEQUF1Qjs7QUFFaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrR0FBa0csOERBQWU7QUFDakg7QUFDQSxlQUFlLG9FQUFlO0FBQzlCLHdCQUF3Qix1RUFBZ0IsdUJBQXVCLDhEQUF3QjtBQUN2RixtQkFBbUIsdUVBQWM7QUFDakMscUJBQXFCLHVFQUFhO0FBQ2xDLHFCQUFxQix1RUFBbUI7QUFDeEMsc0JBQXNCLHVFQUFjO0FBQ3BDO0FBQ0EsdUJBQXVCLDBFQUFlO0FBQ3RDLHlCQUF5Qix1RUFBZ0I7QUFDekMsNEJBQTRCLDhFQUFtQjtBQUMvQywyQkFBMkIsNkVBQW1CO0FBQzlDLHlCQUF5QiwrREFBc0I7QUFDL0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Qsa0VBQWM7QUFDN0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsaUVBQVcsY0FBYyx5REFBcUI7QUFDeEg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0Esd0JBQXdCLHlFQUF3QjtBQUNoRDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsZ0JBQWdCLEdBQUc7QUFDN0MsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHlFQUF3QjtBQUNsRDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixnQkFBZ0I7QUFDdkM7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHlFQUF3QjtBQUN2RDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHlFQUF3QjtBQUN0RCxXQUFXLHlGQUErQjtBQUMxQztBQUNBO0FBQ0EsbUJBQW1CLGtFQUFjO0FBQ2pDLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlFQUF3QjtBQUNoRDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixnQkFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseUVBQXdCO0FBQ3BEO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUZBQStCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC90b2tlbi0xZTgyYzcxYS5icm93c2VyLmVzbS5qcz8yNmFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnN0YW50cywgQmlnTnVtYmVyIH0gZnJvbSAnZXRoZXJzJztcbmltcG9ydCB7IGRHIGFzIE5GVF9CQVNFX0NPTlRSQUNUX1JPTEVTLCBjcyBhcyBDb250cmFjdFdyYXBwZXIsIGJqIGFzIEFiaVNjaGVtYSwgY2IgYXMgVG9rZW5FcmMyMENvbnRyYWN0U2NoZW1hLCBhTCBhcyByZXNvbHZlQWRkcmVzcywgSCBhcyBnZXRSb2xlSGFzaCB9IGZyb20gJy4vaW5kZXgtMzNjZDM0MTUuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgZiBhcyBidWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24sIFQgYXMgVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9ucy03MmY5NjAzYy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBDIGFzIENvbnRyYWN0TWV0YWRhdGEsIGIgYXMgQ29udHJhY3RBcHBVUkksIGEgYXMgQ29udHJhY3RFdmVudHMsIEcgYXMgR2FzQ29zdEVzdGltYXRvciB9IGZyb20gJy4vY29udHJhY3QtYXBwdXJpLTVjNDBhZjUyLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGEgYXMgZmV0Y2hDdXJyZW5jeVZhbHVlLCBDIGFzIENvbnRyYWN0RW5jb2RlciB9IGZyb20gJy4vZmV0Y2hDdXJyZW5jeVZhbHVlLTMyZDA4YjA1LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IEMgYXMgQ29udHJhY3RJbnRlcmNlcHRvciB9IGZyb20gJy4vY29udHJhY3QtaW50ZXJjZXB0b3ItZDdiMTY0YTcuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgQyBhcyBDb250cmFjdFBsYXRmb3JtRmVlIH0gZnJvbSAnLi9jb250cmFjdC1wbGF0Zm9ybS1mZWUtZTc1NmU2OGYuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgQyBhcyBDb250cmFjdFJvbGVzIH0gZnJvbSAnLi9jb250cmFjdC1yb2xlcy03MTk4OGQyZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBDIGFzIENvbnRyYWN0UHJpbWFyeVNhbGUgfSBmcm9tICcuL2NvbnRyYWN0LXNhbGVzLTkxOGM3Y2I4LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGEgYXMgRXJjMjBTaWduYXR1cmVNaW50YWJsZSB9IGZyb20gJy4vZXJjLTIwLTlhMThhNTFjLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IFMgYXMgU3RhbmRhcmRFcmMyMCB9IGZyb20gJy4vZXJjLTIwLXN0YW5kYXJkLTFlOWQ5NjMxLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnem9kJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jaGFpbnMnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NyeXB0byc7XG5pbXBvcnQgJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCAnYm4uanMnO1xuaW1wb3J0ICdiczU4JztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lCdXJuYWJsZUVSQzIwLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3AuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcEVSQzIwX1YyLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BTaW5nbGVQaGFzZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wU2luZ2xlUGhhc2VfVjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMjBQZXJtaXQuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTWludGFibGVFUkMyMC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lNdWx0aWNhbGwuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JU2lnbmF0dXJlTWludEVSQzIwLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzIwTWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQnVybmFibGVFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQ2xhaW1hYmxlRVJDNzIxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURlbGF5ZWRSZXZlYWwuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcEVSQzcyMV9WMy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDNzIxRW51bWVyYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkM3MjFBUXVlcnlhYmxlVXBncmFkZWFibGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDNzIxU3VwcGx5Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUxhenlNaW50Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU1pbnRhYmxlRVJDNzIxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVNpZ25hdHVyZU1pbnRFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JU2lnbmF0dXJlTWludEVSQzcyMV9WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0xhenlNaW50V2l0aFRpZXJfVjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9TaGFyZWRNZXRhZGF0YS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL3pvcmFfSUVSQzcyMURyb3AuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTG95YWx0eUNhcmQuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTkZUTWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDNzIxTWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQnVybmFibGVFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUNsYWltYWJsZUVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcDExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcEVSQzExNTVfVjIuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcFNpbmdsZVBoYXNlMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wU2luZ2xlUGhhc2UxMTU1X1YxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMTE1NU1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzExNTVTdXBwbHkuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMTE1NUVudW1lcmFibGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTWludGFibGVFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVNpZ25hdHVyZU1pbnRFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzI3NzFDb250ZXh0Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUFwcFVSSS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lDb250cmFjdE1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURpcmVjdExpc3RpbmdzLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVuZ2xpc2hBdWN0aW9ucy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lPZmZlcnMuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JUGFja1ZSRkRpcmVjdC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQZXJtaXNzaW9ucy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQZXJtaXNzaW9uc0VudW1lcmFibGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JUGxhdGZvcm1GZWUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JUHJpbWFyeVNhbGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JUm95YWx0eS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL093bmFibGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWlyZHJvcEVSQzIwLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUFpcmRyb3BFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWlyZHJvcEVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWNjb3VudEZhY3RvcnlDb3JlLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUFjY291bnRQZXJtaXNzaW9ucy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBY2NvdW50UGVybWlzc2lvbnNfVjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQWNjb3VudC5qc29uJztcbmltcG9ydCAnZXRoZXJzL2xpYi91dGlscyc7XG5pbXBvcnQgJ2V2ZW50ZW1pdHRlcjMnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L3N0b3JhZ2UnO1xuaW1wb3J0ICcuL2Fzc2VydEVuYWJsZWQtZDE3MDBmMGIuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICcuL2Ryb3AtY2xhaW0tY29uZGl0aW9ucy1lNmYyYWJiZi5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ2Zhc3QtZGVlcC1lcXVhbCc7XG5pbXBvcnQgJy4vc2lnbmF0dXJlLWQzZWE2NDNkLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnLi9ub3JtYWxpemVQcmljZVZhbHVlLTk4NTFjMGViLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9tZXJrbGV0cmVlJztcbmltcG9ydCAnLi9zZXRFcmMyMEFsbG93YW5jZS03Zjc2ZjY3Ny5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ3V1aWQnO1xuXG4vKipcbiAqIE1hbmFnZXMgaGlzdG9yeSBmb3IgVG9rZW4gY29udHJhY3RzXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFRva2VuRVJDMjBIaXN0b3J5IHtcbiAgY29uc3RydWN0b3IoY29udHJhY3RXcmFwcGVyLCBldmVudHMpIHtcbiAgICB0aGlzLmNvbnRyYWN0V3JhcHBlciA9IGNvbnRyYWN0V3JhcHBlcjtcbiAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIGhvbGRlciBiYWxhbmNlc1xuICAgKlxuICAgKiBAcmVtYXJrcyBMZXRzIHlvdSBnZXQgYWxsIHRva2VuIGhvbGRlcnMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgYmFsYW5jZXNcbiAgICogQHJldHVybnMgIEEgSlNPTiBvYmplY3Qgb2YgYWxsIHRva2VuIGhvbGRlcnMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgYmFsYW5jZXNcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCBhbGxIb2xkZXJCYWxhbmNlcyA9IGF3YWl0IGNvbnRyYWN0Lmhpc3RvcnkuZ2V0QWxsSG9sZGVyQmFsYW5jZXMoKTtcbiAgICogYGBgXG4gICAqL1xuICBhc3luYyBnZXRBbGxIb2xkZXJCYWxhbmNlcygpIHtcbiAgICBjb25zdCBhID0gYXdhaXQgdGhpcy5ldmVudHMuZ2V0RXZlbnRzKFwiVHJhbnNmZXJcIik7XG4gICAgY29uc3QgdHhucyA9IGEubWFwKGIgPT4gYi5kYXRhKTtcbiAgICBjb25zdCBiYWxhbmNlcyA9IHt9O1xuICAgIHR4bnMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGZyb20gPSBpdGVtPy5mcm9tO1xuICAgICAgY29uc3QgdG8gPSBpdGVtPy50bztcbiAgICAgIGNvbnN0IGFtb3VudCA9IGl0ZW0/LnZhbHVlO1xuICAgICAgaWYgKCEoZnJvbSA9PT0gY29uc3RhbnRzLkFkZHJlc3NaZXJvKSkge1xuICAgICAgICBpZiAoIShmcm9tIGluIGJhbGFuY2VzKSkge1xuICAgICAgICAgIGJhbGFuY2VzW2Zyb21dID0gQmlnTnVtYmVyLmZyb20oMCk7XG4gICAgICAgIH1cbiAgICAgICAgYmFsYW5jZXNbZnJvbV0gPSBiYWxhbmNlc1tmcm9tXS5zdWIoYW1vdW50KTtcbiAgICAgIH1cbiAgICAgIGlmICghKHRvID09PSBjb25zdGFudHMuQWRkcmVzc1plcm8pKSB7XG4gICAgICAgIGlmICghKHRvIGluIGJhbGFuY2VzKSkge1xuICAgICAgICAgIGJhbGFuY2VzW3RvXSA9IEJpZ051bWJlci5mcm9tKDApO1xuICAgICAgICB9XG4gICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQoYW1vdW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoYmFsYW5jZXMpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChlbnRyaWVzLm1hcChfcmVmID0+IHtcbiAgICAgIGxldCBbLCB2YWx1ZV0gPSBfcmVmO1xuICAgICAgcmV0dXJuIGZldGNoQ3VycmVuY3lWYWx1ZSh0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRQcm92aWRlcigpLCB0aGlzLmNvbnRyYWN0V3JhcHBlci5hZGRyZXNzLCB2YWx1ZSk7XG4gICAgfSkpO1xuICAgIHJldHVybiBlbnRyaWVzLm1hcCgoX3JlZjIsIGluZGV4KSA9PiB7XG4gICAgICBsZXQgW2FkZHJdID0gX3JlZjI7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBob2xkZXI6IGFkZHIsXG4gICAgICAgIGJhbGFuY2U6IHJlc3VsdHNbaW5kZXhdXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgc3RhbmRhcmQgY3J5cHRvIHRva2VuIG9yIGNyeXB0b2N1cnJlbmN5LlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgVGhpcmR3ZWJTREsgfSBmcm9tIFwiQHRoaXJkd2ViLWRldi9zZGtcIjtcbiAqXG4gKiBjb25zdCBzZGsgPSBuZXcgVGhpcmR3ZWJTREsoXCJ7e2NoYWluTmFtZX19XCIpO1xuICogY29uc3QgY29udHJhY3QgPSBhd2FpdCBzZGsuZ2V0Q29udHJhY3QoXCJ7e2NvbnRyYWN0X2FkZHJlc3N9fVwiLCBcInRva2VuXCIpO1xuICogYGBgXG4gKlxuICogQGludGVybmFsXG4gKiBAZGVwcmVjYXRlZCB1c2UgY29udHJhY3QuZXJjMjAgaW5zdGVhZFxuICovXG5jbGFzcyBUb2tlbiBleHRlbmRzIFN0YW5kYXJkRXJjMjAge1xuICBzdGF0aWMgY29udHJhY3RSb2xlcyA9IE5GVF9CQVNFX0NPTlRSQUNUX1JPTEVTO1xuXG4gIC8qKlxuICAgKiBTaWduYXR1cmUgTWludGluZ1xuICAgKiBAcmVtYXJrcyBHZW5lcmF0ZSB0b2tlbnMgdGhhdCBjYW4gYmUgbWludGVkIG9ubHkgd2l0aCB5b3VyIG93biBzaWduYXR1cmUsIGF0dGFjaGluZyB5b3VyIG93biBzZXQgb2YgbWludCBjb25kaXRpb25zLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIC8vIHNlZSBob3cgdG8gY3JhZnQgYSBwYXlsb2FkIHRvIHNpZ24gaW4gdGhlIGBjb250cmFjdC5zaWduYXR1cmUuZ2VuZXJhdGUoKWAgZG9jdW1lbnRhdGlvblxuICAgKiBjb25zdCBzaWduZWRQYXlsb2FkID0gY29udHJhY3Quc2lnbmF0dXJlLmdlbmVyYXRlKHBheWxvYWQpO1xuICAgKlxuICAgKiAvLyBub3cgYW55b25lIGNhbiBtaW50IHRoZSB0b2tlbnNcbiAgICogY29uc3QgdHggPSBjb250cmFjdC5zaWduYXR1cmUubWludChzaWduZWRQYXlsb2FkKTtcbiAgICogY29uc3QgcmVjZWlwdCA9IHR4LnJlY2VpcHQ7IC8vIHRoZSBtaW50IHRyYW5zYWN0aW9uIHJlY2VpcHRcbiAgICogYGBgXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgY29uc3RydWN0b3IobmV0d29yaywgYWRkcmVzcywgc3RvcmFnZSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICBsZXQgYWJpID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7XG4gICAgbGV0IGNoYWluSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgY29udHJhY3RXcmFwcGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiBuZXcgQ29udHJhY3RXcmFwcGVyKG5ldHdvcmssIGFkZHJlc3MsIGFiaSwgb3B0aW9ucywgc3RvcmFnZSk7XG4gICAgc3VwZXIoY29udHJhY3RXcmFwcGVyLCBzdG9yYWdlLCBjaGFpbklkKTtcbiAgICB0aGlzLmFiaSA9IEFiaVNjaGVtYS5wYXJzZShhYmkgfHwgW10pO1xuICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgQ29udHJhY3RNZXRhZGF0YSh0aGlzLmNvbnRyYWN0V3JhcHBlciwgVG9rZW5FcmMyMENvbnRyYWN0U2NoZW1hLCB0aGlzLnN0b3JhZ2UpO1xuICAgIHRoaXMuYXBwID0gbmV3IENvbnRyYWN0QXBwVVJJKHRoaXMuY29udHJhY3RXcmFwcGVyLCB0aGlzLm1ldGFkYXRhLCB0aGlzLnN0b3JhZ2UpO1xuICAgIHRoaXMucm9sZXMgPSBuZXcgQ29udHJhY3RSb2xlcyh0aGlzLmNvbnRyYWN0V3JhcHBlciwgVG9rZW4uY29udHJhY3RSb2xlcyk7XG4gICAgdGhpcy5zYWxlcyA9IG5ldyBDb250cmFjdFByaW1hcnlTYWxlKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBDb250cmFjdEV2ZW50cyh0aGlzLmNvbnRyYWN0V3JhcHBlcik7XG4gICAgdGhpcy5oaXN0b3J5ID0gbmV3IFRva2VuRVJDMjBIaXN0b3J5KHRoaXMuY29udHJhY3RXcmFwcGVyLCB0aGlzLmV2ZW50cyk7XG4gICAgdGhpcy5lbmNvZGVyID0gbmV3IENvbnRyYWN0RW5jb2Rlcih0aGlzLmNvbnRyYWN0V3JhcHBlcik7XG4gICAgdGhpcy5lc3RpbWF0b3IgPSBuZXcgR2FzQ29zdEVzdGltYXRvcih0aGlzLmNvbnRyYWN0V3JhcHBlcik7XG4gICAgdGhpcy5wbGF0Zm9ybUZlZXMgPSBuZXcgQ29udHJhY3RQbGF0Zm9ybUZlZSh0aGlzLmNvbnRyYWN0V3JhcHBlcik7XG4gICAgdGhpcy5pbnRlcmNlcHRvciA9IG5ldyBDb250cmFjdEludGVyY2VwdG9yKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLnNpZ25hdHVyZSA9IG5ldyBFcmMyMFNpZ25hdHVyZU1pbnRhYmxlKHRoaXMuY29udHJhY3RXcmFwcGVyLCB0aGlzLnJvbGVzKTtcbiAgfVxuXG4gIC8qKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogUkVBRCBGVU5DVElPTlNcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIEdldCB5b3VyIHdhbGxldCB2b3RpbmcgcG93ZXIgZm9yIHRoZSBjdXJyZW50IGNoZWNrcG9pbnRzXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBhbW91bnQgb2Ygdm90aW5nIHBvd2VyIGluIHRva2Vuc1xuICAgKi9cbiAgYXN5bmMgZ2V0Vm90ZUJhbGFuY2UoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0Vm90ZUJhbGFuY2VPZihhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5nZXRTaWduZXJBZGRyZXNzKCkpO1xuICB9XG4gIGFzeW5jIGdldFZvdGVCYWxhbmNlT2YoYWNjb3VudCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmVyYzIwLmdldFZhbHVlKGF3YWl0IHRoaXMuY29udHJhY3RXcmFwcGVyLnJlYWQoXCJnZXRWb3Rlc1wiLCBbYWNjb3VudF0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgeW91ciB2b3RpbmcgZGVsZWdhdGVlIGFkZHJlc3NcbiAgICpcbiAgICogQHJldHVybnMgVGhlIGFkZHJlc3Mgb2YgeW91ciB2b3RlIGRlbGVnYXRlZVxuICAgKi9cbiAgYXN5bmMgZ2V0RGVsZWdhdGlvbigpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXREZWxlZ2F0aW9uT2YoYXdhaXQgdGhpcy5jb250cmFjdFdyYXBwZXIuZ2V0U2lnbmVyQWRkcmVzcygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBzcGVjaWZpYyBhZGRyZXNzIHZvdGluZyBkZWxlZ2F0ZWUgYWRkcmVzc1xuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgYWRkcmVzcyBvZiB5b3VyIHZvdGUgZGVsZWdhdGVlXG4gICAqL1xuICBhc3luYyBnZXREZWxlZ2F0aW9uT2YoYWNjb3VudCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0V3JhcHBlci5yZWFkKFwiZGVsZWdhdGVzXCIsIFthd2FpdCByZXNvbHZlQWRkcmVzcyhhY2NvdW50KV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIHVzZXJzIGNhbiB0cmFuc2ZlciB0b2tlbnMgZnJvbSB0aGlzIGNvbnRyYWN0XG4gICAqL1xuICBhc3luYyBpc1RyYW5zZmVyUmVzdHJpY3RlZCgpIHtcbiAgICBjb25zdCBhbnlvbmVDYW5UcmFuc2ZlciA9IGF3YWl0IHRoaXMuY29udHJhY3RXcmFwcGVyLnJlYWQoXCJoYXNSb2xlXCIsIFtnZXRSb2xlSGFzaChcInRyYW5zZmVyXCIpLCBjb25zdGFudHMuQWRkcmVzc1plcm9dKTtcbiAgICByZXR1cm4gIWFueW9uZUNhblRyYW5zZmVyO1xuICB9XG5cbiAgLyoqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiBXUklURSBGVU5DVElPTlNcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIE1pbnQgVG9rZW5zIGZvciB0aGUgY29ubmVjdGVkIHdhbGxldFxuICAgKlxuICAgKiBAcmVtYXJrcyBTZWUge0BsaW5rIFRva2VuLm1pbnRUb31cbiAgICovXG4gIG1pbnQgPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYXN5bmMgYW1vdW50ID0+IHtcbiAgICByZXR1cm4gdGhpcy5lcmMyMC5taW50LnByZXBhcmUoYW1vdW50KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIE1pbnQgVG9rZW5zXG4gICAqXG4gICAqIEByZW1hcmtzIE1pbnQgdG9rZW5zIHRvIGEgc3BlY2lmaWVkIGFkZHJlc3MuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgdG9BZGRyZXNzID0gXCJ7e3dhbGxldF9hZGRyZXNzfX1cIjsgLy8gQWRkcmVzcyBvZiB0aGUgd2FsbGV0IHlvdSB3YW50IHRvIG1pbnQgdGhlIHRva2VucyB0b1xuICAgKiBjb25zdCBhbW91bnQgPSBcIjEuNVwiOyAvLyBUaGUgYW1vdW50IG9mIHRoaXMgdG9rZW4geW91IHdhbnQgdG8gbWludFxuICAgKlxuICAgKiBhd2FpdCBjb250cmFjdC5taW50VG8odG9BZGRyZXNzLCBhbW91bnQpO1xuICAgKiBgYGBcbiAgICovXG4gIG1pbnRUbyA9IC8qIEBfX1BVUkVfXyAqL2J1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAodG8sIGFtb3VudCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmVyYzIwLm1pbnRUby5wcmVwYXJlKHRvLCBhbW91bnQpO1xuICB9KTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbWludCB0cmFuc2FjdGlvbiB3aXRob3V0IGV4ZWN1dGluZyBpdC5cbiAgICogVGhpcyBpcyB1c2VmdWwgZm9yIGVzdGltYXRpbmcgdGhlIGdhcyBjb3N0IG9mIGEgbWludCB0cmFuc2FjdGlvbiwgb3ZlcnJpZGluZyB0cmFuc2FjdGlvbiBvcHRpb25zIGFuZCBoYXZpbmcgZmluZSBncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgdHJhbnNhY3Rpb24gZXhlY3V0aW9uLlxuICAgKiBAcGFyYW0gcmVjZWl2ZXIgLSBBZGRyZXNzIHlvdSB3YW50IHRvIHNlbmQgdGhlIHRva2VuIHRvXG4gICAqIEBwYXJhbSBhbW91bnQgLSBUaGUgYW1vdW50IG9mIHRva2VucyB5b3Ugd2FudCB0byBtaW50XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgY29udHJhY3QubWludC5wcmVwYXJlKC4uLmFyZ3MpYCBpbnN0ZWFkXG4gICAqL1xuICBhc3luYyBnZXRNaW50VHJhbnNhY3Rpb24odG8sIGFtb3VudCkge1xuICAgIHJldHVybiB0aGlzLmVyYzIwLmdldE1pbnRUcmFuc2FjdGlvbih0bywgYW1vdW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNaW50IFRva2VucyBUbyBNYW55IFdhbGxldHNcbiAgICpcbiAgICogQHJlbWFya3MgTWludCB0b2tlbnMgdG8gbWFueSB3YWxsZXRzIGluIG9uZSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiAvLyBEYXRhIG9mIHRoZSB0b2tlbnMgeW91IHdhbnQgdG8gbWludFxuICAgKiBjb25zdCBkYXRhID0gW1xuICAgKiAgIHtcbiAgICogICAgIHRvQWRkcmVzczogXCJ7e3dhbGxldF9hZGRyZXNzfX1cIiwgLy8gQWRkcmVzcyB0byBtaW50IHRva2VucyB0b1xuICAgKiAgICAgYW1vdW50OiAwLjIsIC8vIEhvdyBtYW55IHRva2VucyB0byBtaW50IHRvIHNwZWNpZmllZCBhZGRyZXNzXG4gICAqICAgfSxcbiAgICogIHtcbiAgICogICAgdG9BZGRyZXNzOiBcIjB4Li4uXCIsXG4gICAqICAgIGFtb3VudDogMS40LFxuICAgKiAgfVxuICAgKiBdXG4gICAqXG4gICAqIGF3YWl0IGNvbnRyYWN0Lm1pbnRCYXRjaFRvKGRhdGEpO1xuICAgKiBgYGBcbiAgICovXG4gIG1pbnRCYXRjaFRvID0gLyogQF9fUFVSRV9fICovYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uKGFzeW5jIGFyZ3MgPT4ge1xuICAgIHJldHVybiB0aGlzLmVyYzIwLm1pbnRCYXRjaFRvLnByZXBhcmUoYXJncyk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBMZXRzIHlvdSBkZWxlZ2F0ZSB5b3VyIHZvdGluZyBwb3dlciB0byB0aGUgZGVsZWdhdGVlQWRkcmVzc1xuICAgKlxuICAgKiBAcGFyYW0gZGVsZWdhdGVlQWRkcmVzcyAtIGRlbGVnYXRlZSB3YWxsZXQgYWRkcmVzc1xuICAgKiBAYWxwaGFcbiAgICovXG4gIGRlbGVnYXRlVG8gPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYXN5bmMgZGVsZWdhdGVlQWRkcmVzcyA9PiB7XG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb21Db250cmFjdFdyYXBwZXIoe1xuICAgICAgY29udHJhY3RXcmFwcGVyOiB0aGlzLmNvbnRyYWN0V3JhcHBlcixcbiAgICAgIG1ldGhvZDogXCJkZWxlZ2F0ZVwiLFxuICAgICAgYXJnczogW2F3YWl0IHJlc29sdmVBZGRyZXNzKGRlbGVnYXRlZUFkZHJlc3MpXVxuICAgIH0pO1xuICB9KTtcblxuICAvKipcbiAgICogQnVybiBUb2tlbnNcbiAgICpcbiAgICogQHJlbWFya3MgQnVybiB0b2tlbnMgaGVsZCBieSB0aGUgY29ubmVjdGVkIHdhbGxldFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIC8vIFRoZSBhbW91bnQgb2YgdGhpcyB0b2tlbiB5b3Ugd2FudCB0byBidXJuXG4gICAqIGNvbnN0IGFtb3VudCA9IDEuMjtcbiAgICpcbiAgICogYXdhaXQgY29udHJhY3QuYnVyblRva2VucyhhbW91bnQpO1xuICAgKiBgYGBcbiAgICovXG4gIGJ1cm4gPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYW1vdW50ID0+IHtcbiAgICByZXR1cm4gdGhpcy5lcmMyMC5idXJuLnByZXBhcmUoYW1vdW50KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEJ1cm4gVG9rZW5zXG4gICAqXG4gICAqIEByZW1hcmtzIEJ1cm4gdG9rZW5zIGhlbGQgYnkgdGhlIHNwZWNpZmllZCB3YWxsZXRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiAvLyBBZGRyZXNzIG9mIHRoZSB3YWxsZXQgc2VuZGluZyB0aGUgdG9rZW5zXG4gICAqIGNvbnN0IGhvbGRlckFkZHJlc3MgPSBcInt7d2FsbGV0X2FkZHJlc3N9fVwiO1xuICAgKlxuICAgKiAvLyBUaGUgYW1vdW50IG9mIHRoaXMgdG9rZW4geW91IHdhbnQgdG8gYnVyblxuICAgKiBjb25zdCBhbW91bnQgPSAxLjI7XG4gICAqXG4gICAqIGF3YWl0IGNvbnRyYWN0LmJ1cm5Gcm9tKGhvbGRlckFkZHJlc3MsIGFtb3VudCk7XG4gICAqIGBgYFxuICAgKi9cbiAgYnVybkZyb20gPSAvKiBAX19QVVJFX18gKi9idWlsZFRyYW5zYWN0aW9uRnVuY3Rpb24oYXN5bmMgKGhvbGRlciwgYW1vdW50KSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZXJjMjAuYnVybkZyb20ucHJlcGFyZShob2xkZXIsIGFtb3VudCk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIHByZXBhcmUobWV0aG9kLCBhcmdzLCBvdmVycmlkZXMpIHtcbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbUNvbnRyYWN0V3JhcHBlcih7XG4gICAgICBjb250cmFjdFdyYXBwZXI6IHRoaXMuY29udHJhY3RXcmFwcGVyLFxuICAgICAgbWV0aG9kLFxuICAgICAgYXJncyxcbiAgICAgIG92ZXJyaWRlc1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgY2FsbChmdW5jdGlvbk5hbWUsIGFyZ3MsIG92ZXJyaWRlcykge1xuICAgIHJldHVybiB0aGlzLmNvbnRyYWN0V3JhcHBlci5jYWxsKGZ1bmN0aW9uTmFtZSwgYXJncywgb3ZlcnJpZGVzKTtcbiAgfVxufVxuXG5leHBvcnQgeyBUb2tlbiB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/token-1e82c71a.browser.esm.js\n"));

/***/ })

}]);