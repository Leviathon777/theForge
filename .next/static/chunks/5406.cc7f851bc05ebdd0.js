"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5406],{93030:function(t,r,e){e.d(r,{S:function(){return s}});var n=e(99612),a=e(23437),o=e(94913);class s{get chainId(){return this._chainId}constructor(t,r,e){this.contractWrapper=t,this.storage=r,this.erc721=new o.E(this.contractWrapper,this.storage,e),this._chainId=e}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc721.getAll(t)}async getOwned(t,r){return t&&(t=await(0,n.aL)(t)),this.erc721.getOwned(t,r)}async getOwnedTokenIds(t){return t&&(t=await(0,n.aL)(t)),this.erc721.getOwnedTokenIds(t)}async totalSupply(){return this.erc721.totalCirculatingSupply()}async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,r){return this.erc721.isApproved(t,r)}transfer=(0,a.f)((async(t,r)=>this.erc721.transfer.prepare(t,r)));setApprovalForAll=(0,a.f)((async(t,r)=>this.erc721.setApprovalForAll.prepare(t,r)));setApprovalForToken=(0,a.f)((async(t,r)=>a.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[await(0,n.aL)(t),r]})))}},89276:function(t,r,e){e.d(r,{h:function(){return a}});var n=e(99612);async function a(t,r,a){const o=t.getProvider(),s=(await Promise.resolve().then(e.t.bind(e,30853,19))).default,i=new n.cs(o,r,s,{},t.storage),c=await t.getSignerAddress(),d=t.address;return(await i.read("allowance",[c,d])).gte(a)}},63813:function(t,r,e){e.d(r,{a:function(){return h},g:function(){return w},h:function(){return p},i:function(){return d},m:function(){return l},v:function(){return u}});var n=e(64146),a=e(2593),o=e(38776),s=e(2840),i=e(99612),c=e(43277);async function d(t,r,a,o,i){try{const d=(await e.e(4309).then(e.t.bind(e,84309,19))).default,p=new n.CH(a,d,t),[u,l]=await Promise.all([p.supportsInterface(s.I),p.supportsInterface(s.a)]);if(u){const s=(await Promise.resolve().then(e.t.bind(e,56509,19))).default,d=new n.CH(a,s,t);if(await d.isApprovedForAll(i,r))return!0;let p;try{p=await d.getApproved(o)}catch(c){}return p?.toLowerCase()===r.toLowerCase()}if(l){const o=(await Promise.resolve().then(e.t.bind(e,88417,19))).default,s=new n.CH(a,o,t);return await s.isApprovedForAll(i,r)}return console.error("Contract does not implement ERC 1155 or ERC 721."),!1}catch(d){return console.error("Failed to check if token is approved",d),!1}}async function p(t,r,n,a,o){const c=(await e.e(4309).then(e.t.bind(e,84309,19))).default,d=new i.cs(t.getSignerOrProvider(),n,c,t.options,t.storage),[p,u]=await Promise.all([d.read("supportsInterface",[s.I]),d.read("supportsInterface",[s.a])]);if(p){const s=(await Promise.resolve().then(e.t.bind(e,56509,19))).default,c=new i.cs(t.getSignerOrProvider(),n,s,t.options,t.storage);if(!(await c.read("isApprovedForAll",[o,r]))){(await c.read("getApproved",[a])).toLowerCase()===r.toLowerCase()||await c.sendTransaction("setApprovalForAll",[r,!0])}}else{if(!u)throw Error("Contract must implement ERC 1155 or ERC 721.");{const a=(await Promise.resolve().then(e.t.bind(e,88417,19))).default,s=new i.cs(t.getSignerOrProvider(),n,a,t.options,t.storage);await s.read("isApprovedForAll",[o,r])||await s.sendTransaction("setApprovalForAll",[r,!0])}}}function u(t){if((0,o.Z)(void 0!==t.assetContractAddress&&null!==t.assetContractAddress,"Asset contract address is required"),(0,o.Z)(void 0!==t.buyoutPricePerToken&&null!==t.buyoutPricePerToken,"Buyout price is required"),(0,o.Z)(void 0!==t.listingDurationInSeconds&&null!==t.listingDurationInSeconds,"Listing duration is required"),(0,o.Z)(void 0!==t.startTimestamp&&null!==t.startTimestamp,"Start time is required"),(0,o.Z)(void 0!==t.tokenId&&null!==t.tokenId,"Token ID is required"),(0,o.Z)(void 0!==t.quantity&&null!==t.quantity,"Quantity is required"),"NewAuctionListing"===t.type)(0,o.Z)(void 0!==t.reservePricePerToken&&null!==t.reservePricePerToken,"Reserve price is required")}async function l(t,r,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await(0,c.a)(t,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:r}}function h(t,r,e){if(e=a.O$.from(e),t=a.O$.from(t),r=a.O$.from(r),t.eq(a.O$.from(0)))return!1;return r.sub(t).mul(i.dE).div(t).gte(e)}async function w(t,r,e){const n=[];for(;r-t>s.D;)n.push(e(t,t+s.D-1)),t+=s.D;return n.push(e(t,r-1)),await Promise.all(n)}},15406:function(t,r,e){e.r(r),e.d(r,{Multiwrap:function(){return f}});var n=e(61744),a=e(43277),o=e(89276),s=e(99979),i=e(99612),c=e(63813),d=e(2840),p=e(23437),u=e(21919),l=e(88309),h=e(82123),w=e(93030);e(13550),e(77191),e(71770),e(64063);class f extends w.S{static contractRoles=i.dI;constructor(t,r,e){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,s=arguments.length>5?arguments[5]:void 0;super(arguments.length>6&&void 0!==arguments[6]?arguments[6]:new i.cs(t,r,o,n,e),e,s),this.abi=i.bj.parse(o||[]),this.metadata=new u.C(this.contractWrapper,i.dJ,this.storage),this.app=new u.b(this.contractWrapper,this.metadata,this.storage),this.roles=new h.C(this.contractWrapper,f.contractRoles),this.encoder=new a.C(this.contractWrapper),this.estimator=new u.G(this.contractWrapper),this.events=new u.a(this.contractWrapper),this.royalties=new l.C(this.contractWrapper,this.metadata),this.owner=new l.a(this.contractWrapper)}async getWrappedContents(t){const r=await this.contractWrapper.read("getWrappedContents",[t]),e=[],o=[],s=[];for(const i of r)switch(i.tokenType){case 0:{const t=await(0,a.f)(this.contractWrapper.getProvider(),i.assetContract);e.push({contractAddress:i.assetContract,quantity:n.formatUnits(i.totalAmount,t.decimals)});break}case 1:o.push({contractAddress:i.assetContract,tokenId:i.tokenId});break;case 2:s.push({contractAddress:i.assetContract,tokenId:i.tokenId,quantity:i.totalAmount.toString()})}return{erc20Tokens:e,erc721Tokens:o,erc1155Tokens:s}}wrap=(0,p.f)((async(t,r,e)=>{const[n,a,o]=await Promise.all([(0,d.b)(r,this.storage),this.toTokenStructList(t),(0,i.aL)(e||await this.contractWrapper.getSignerAddress())]);return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"wrap",args:[a,n,o],parse:t=>{const r=this.contractWrapper.parseLogs("TokensWrapped",t?.logs);if(0===r.length)throw new Error("TokensWrapped event not found");const e=r[0].args.tokenIdOfWrappedToken;return{id:e,receipt:t,data:()=>this.get(e)}}})}));unwrap=(0,p.f)((async(t,r)=>{const e=await(0,i.aL)(r||await this.contractWrapper.getSignerAddress());return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"unwrap",args:[t,e]})}));async toTokenStructList(t){const r=[],e=this.contractWrapper.getProvider(),n=await this.contractWrapper.getSignerAddress();if(t.erc20Tokens)for(const a of t.erc20Tokens){const t=await(0,s.n)(e,a.quantity,a.contractAddress);if(!(await(0,o.h)(this.contractWrapper,a.contractAddress,t)))throw new Error(`ERC20 token with contract address "${a.contractAddress}" does not have enough allowance to transfer.\n\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\n\nawait sdk.getToken("${a.contractAddress}").setAllowance("${this.getAddress()}", ${a.quantity});\n\n`);r.push({assetContract:a.contractAddress,totalAmount:t,tokenId:0,tokenType:0})}if(t.erc721Tokens)for(const a of t.erc721Tokens){if(!(await(0,c.i)(this.contractWrapper.getProvider(),this.getAddress(),a.contractAddress,a.tokenId,n)))throw new Error(`ERC721 token "${a.tokenId}" with contract address "${a.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getNFTCollection("${a.contractAddress}").setApprovalForToken("${this.getAddress()}", ${a.tokenId});\n\n`);r.push({assetContract:a.contractAddress,totalAmount:0,tokenId:a.tokenId,tokenType:1})}if(t.erc1155Tokens)for(const a of t.erc1155Tokens){if(!(await(0,c.i)(this.contractWrapper.getProvider(),this.getAddress(),a.contractAddress,a.tokenId,n)))throw new Error(`ERC1155 token "${a.tokenId}" with contract address "${a.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getEdition("${a.contractAddress}").setApprovalForAll("${this.getAddress()}", true);\n\n`);r.push({assetContract:a.contractAddress,totalAmount:a.quantity,tokenId:a.tokenId,tokenType:2})}return r}async prepare(t,r,e){return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}}}}]);