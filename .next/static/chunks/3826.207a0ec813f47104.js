"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3826,9430],{38168:function(t,e,s){s.d(e,{W:function(){return r}});var i=s(22555),n=s(68457);class r extends n.Z{constructor(t){let{chains:e=i.gL9,options:s}=t;super(),this.chains=e,this.options=s}getBlockExplorerUrls(t){const e=t.explorers?.map((t=>t.url))??[];return e.length>0?e:void 0}isChainUnsupported(t){return!this.chains.some((e=>e.chainId===t))}updateChains(t){this.chains=t}}},81036:function(t,e,s){s.d(e,{A:function(){return o},C:function(){return a},P:function(){return r},R:function(){return h},S:function(){return d},U:function(){return u},a:function(){return c}});var i=s(37139);class n extends Error{constructor(t,e){const{cause:s,code:i,data:n}=e;if(!Number.isInteger(i))throw new Error('"code" must be an integer.');if(!t||"string"!==typeof t)throw new Error('"message" must be a nonempty string.');super(`${t}. Cause: ${JSON.stringify(s)}`),this.cause=s,this.code=i,this.data=n}}class r extends n{constructor(t,e){const{cause:s,code:i,data:n}=e;if(!(Number.isInteger(i)&&i>=1e3&&i<=4999))throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');super(t,{cause:s,code:i,data:n})}}class o extends Error{constructor(){super(...arguments),(0,i._)(this,"name","AddChainError"),(0,i._)(this,"message","Error adding chain")}}class a extends Error{constructor(t){let{chainId:e,connectorId:s}=t;super(`Chain "${e}" not configured for connector "${s}".`),(0,i._)(this,"name","ChainNotConfigured")}}class c extends Error{constructor(){super(...arguments),(0,i._)(this,"name","ConnectorNotFoundError"),(0,i._)(this,"message","Connector not found")}}class h extends n{constructor(t){super("Resource unavailable",{cause:t,code:-32002}),(0,i._)(this,"name","ResourceUnavailable")}}class d extends r{constructor(t){super("Error switching chain",{cause:t,code:4902}),(0,i._)(this,"name","SwitchChainError")}}class u extends r{constructor(t){super("User rejected request",{cause:t,code:4001}),(0,i._)(this,"name","UserRejectedRequestError")}}},43826:function(t,e,s){s.r(e),s.d(e,{WalletConnectConnector:function(){return _}});var i=s(37139),n=s(81036),r=s(19485),o=s(241),a=s(16441),c=s(2850),h=s(84257),d=s(38168);s(68457);const u=new Set([1,137,10,42161,56]),p="wagmi.requestedChains",l="wallet_addEthereumChain",g="last-used-chain-id";class _ extends d.W{constructor(t){super({...t,options:{isNewChainsStale:!0,...t.options}}),(0,i._)(this,"id",c.w.walletConnect),(0,i._)(this,"name","WalletConnect"),(0,i._)(this,"ready",!0),(0,i._)(this,"onAccountsChanged",(t=>{0===t.length?this.emit("disconnect"):t[0]&&this.emit("change",{account:r.getAddress(t[0])})})),(0,i._)(this,"onChainChanged",(async t=>{const e=Number(t),s=this.isChainUnsupported(e);await this._storage.setItem(g,String(t)),this.emit("change",{chain:{id:e,unsupported:s}})})),(0,i._)(this,"onDisconnect",(async()=>{await this._setRequestedChainsIds([]),await this._storage.removeItem(g),this.emit("disconnect")})),(0,i._)(this,"onDisplayUri",(t=>{this.emit("message",{type:"display_uri",data:t})})),(0,i._)(this,"onConnect",(()=>{this.emit("connect",{provider:this._provider})})),this._storage=t.options.storage,this._createProvider(),this.filteredChains=this.chains.length>50?this.chains.filter((t=>u.has(t.chainId))):this.chains,this.showWalletConnectModal=!1!==this.options.qrcode}async connect(){let{chainId:t,pairingTopic:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{let s=t;if(!s){const t=await this._storage.getItem(g),e=t?parseInt(t):void 0;s=e&&!this.isChainUnsupported(e)?e:this.filteredChains[0]?.chainId}if(!s)throw new Error("No chains found on connector.");const i=await this.getProvider();if(this.setupListeners(),i.session){await i.disconnect();const t=this.filteredChains.filter((t=>t.chainId!==s)).map((t=>t.chainId));this.emit("message",{type:"connecting"}),await i.connect({pairingTopic:e,chains:[s],optionalChains:t.length>0?t:[s]}),await this._setRequestedChainsIds(this.filteredChains.map((t=>{let{chainId:e}=t;return e})))}const n=await i.enable();if(!n[0])throw new Error("No accounts found on provider.");const a=r.getAddress(n[0]),c=await this.getChainId();return{account:a,chain:{id:c,unsupported:this.isChainUnsupported(c)},provider:new o.Q(i)}}catch(s){if(/user rejected/i.test(s?.message))throw new n.U(s);throw s}}async disconnect(){const t=()=>{if("undefined"!==typeof localStorage)for(const t in localStorage)t.startsWith("wc@2")&&localStorage.removeItem(t)};t();const e=await this.getProvider();(async()=>{try{await e.disconnect()}catch(s){if(!/No matching key/i.test(s.message))throw s}finally{this._removeListeners(),await this._setRequestedChainsIds([]),t()}})()}async getAccount(){const{accounts:t}=await this.getProvider();if(!t[0])throw new Error("No accounts found on provider.");return r.getAddress(t[0])}async getChainId(){const{chainId:t}=await this.getProvider();return t}async getProvider(){let{chainId:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this._provider||await this._createProvider(),t&&await this.switchChain(t),!this._provider)throw new Error("No provider found.");return this._provider}async getSigner(){let{chainId:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const[e,s]=await Promise.all([this.getProvider({chainId:t}),this.getAccount()]);return new o.Q(e,t).getSigner(s)}async isAuthorized(){try{const[t,e]=await Promise.all([this.getAccount(),this.getProvider()]),s=await this._isChainsStale();if(!t)return!1;if(s&&e.session){try{await e.disconnect()}catch{}return!1}return!0}catch{return!1}}async switchChain(t){const e=this.chains.find((e=>e.chainId===t));if(!e)throw new n.S(`Chain with ID: ${t}, not found on connector.`);try{const s=await this.getProvider(),i=this._getNamespaceChainsIds(),n=this._getNamespaceMethods();if(!i.includes(t)&&n.includes(l)){const i=e.explorers&&e.explorers[0],n=i?{blockExplorerUrls:[i.url]}:{};await s.request({method:l,params:[{chainId:a.hexValue(e.chainId),chainName:e.name,nativeCurrency:e.nativeCurrency,rpcUrls:(0,h.g)(e),...n}]});const r=await this._getRequestedChainsIds();r.push(t),await this._setRequestedChainsIds(r)}return await s.request({method:"wallet_switchEthereumChain",params:[{chainId:a.hexValue(t)}]}),e}catch(s){if(/user rejected request/i.test("string"===typeof s?s:s?.message))throw new n.U(s);throw new n.S(s)}}async _createProvider(){return this._initProviderPromise||(this._initProviderPromise=this.initProvider()),this._initProviderPromise}async initProvider(){const{default:t,OPTIONAL_EVENTS:e,OPTIONAL_METHODS:i}=await Promise.all([s.e(1133),s.e(9179),s.e(774)]).then(s.bind(s,40774)),[n,...r]=this.filteredChains.map((t=>{let{chainId:e}=t;return e}));n&&(this._provider=await t.init({showQrModal:this.showWalletConnectModal,projectId:this.options.projectId,methods:["eth_sendTransaction","personal_sign","eth_signTypedData_v4"],optionalMethods:i,optionalEvents:e,chains:[n],optionalChains:r,metadata:{name:this.options.dappMetadata.name,description:this.options.dappMetadata.description||"",url:this.options.dappMetadata.url,icons:[this.options.dappMetadata.logoUrl||""]},rpcMap:Object.fromEntries(this.filteredChains.map((t=>[t.chainId,t.rpc[0]||""]))),qrModalOptions:this.options.qrModalOptions}))}async _isChainsStale(){if(this._getNamespaceMethods().includes(l))return!1;if(!this.options.isNewChainsStale)return!1;const t=await this._getRequestedChainsIds(),e=this.filteredChains.map((t=>{let{chainId:e}=t;return e})),s=this._getNamespaceChainsIds();return!(s.length&&!s.some((t=>e.includes(t))))&&!e.every((e=>t.includes(e)))}async setupListeners(){this._provider&&(this._removeListeners(),this._provider.on("accountsChanged",this.onAccountsChanged),this._provider.on("chainChanged",this.onChainChanged),this._provider.on("disconnect",this.onDisconnect),this._provider.on("session_delete",this.onDisconnect),this._provider.on("display_uri",this.onDisplayUri),this._provider.on("connect",this.onConnect))}_removeListeners(){this._provider&&(this._provider.removeListener("accountsChanged",this.onAccountsChanged),this._provider.removeListener("chainChanged",this.onChainChanged),this._provider.removeListener("disconnect",this.onDisconnect),this._provider.removeListener("session_delete",this.onDisconnect),this._provider.removeListener("display_uri",this.onDisplayUri),this._provider.removeListener("connect",this.onConnect))}async _setRequestedChainsIds(t){await this._storage.setItem(p,JSON.stringify(t))}async _getRequestedChainsIds(){const t=await this._storage.getItem(p);return t?JSON.parse(t):[]}_getNamespaceChainsIds(){if(!this._provider)return[];const t=this._provider.session?.namespaces.eip155?.chains?.map((t=>parseInt(t.split(":")[1]||"")));return t??[]}_getNamespaceMethods(){if(!this._provider)return[];const t=this._provider.session?.namespaces.eip155?.methods;return t??[]}}}}]);